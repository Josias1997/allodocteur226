(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{691:function(t,e,r){"use strict";r.r(e),function(t){r.d(e,"AElement",(function(){return Ut})),r.d(e,"AnimateColorElement",(function(){return Lt})),r.d(e,"AnimateElement",(function(){return It})),r.d(e,"AnimateTransformElement",(function(){return Dt})),r.d(e,"BoundingBox",(function(){return ft})),r.d(e,"CB1",(function(){return I})),r.d(e,"CB2",(function(){return L})),r.d(e,"CB3",(function(){return D})),r.d(e,"CB4",(function(){return B})),r.d(e,"Canvg",(function(){return xe})),r.d(e,"CircleElement",(function(){return wt})),r.d(e,"ClipPathElement",(function(){return ae})),r.d(e,"DefsElement",(function(){return Mt})),r.d(e,"DescElement",(function(){return fe})),r.d(e,"Document",(function(){return ve})),r.d(e,"Element",(function(){return st})),r.d(e,"EllipseElement",(function(){return At})),r.d(e,"FeColorMatrixElement",(function(){return re})),r.d(e,"FeCompositeElement",(function(){return he})),r.d(e,"FeDropShadowElement",(function(){return oe})),r.d(e,"FeGaussianBlurElement",(function(){return ce})),r.d(e,"FeMorphologyElement",(function(){return ue})),r.d(e,"FilterElement",(function(){return se})),r.d(e,"Font",(function(){return lt})),r.d(e,"FontElement",(function(){return Bt})),r.d(e,"FontFaceElement",(function(){return jt})),r.d(e,"GElement",(function(){return Nt})),r.d(e,"GlyphElement",(function(){return vt})),r.d(e,"GradientElement",(function(){return _t})),r.d(e,"ImageElement",(function(){return qt})),r.d(e,"LineElement",(function(){return Tt})),r.d(e,"LinearGradientElement",(function(){return Vt})),r.d(e,"MarkerElement",(function(){return Ct})),r.d(e,"MaskElement",(function(){return ie})),r.d(e,"Matrix",(function(){return et})),r.d(e,"MissingGlyphElement",(function(){return zt})),r.d(e,"Mouse",(function(){return Y})),r.d(e,"PSEUDO_ZERO",(function(){return _})),r.d(e,"Parser",(function(){return Z})),r.d(e,"PathElement",(function(){return dt})),r.d(e,"PathParser",(function(){return gt})),r.d(e,"PatternElement",(function(){return Et})),r.d(e,"Point",(function(){return X})),r.d(e,"PolygonElement",(function(){return Pt})),r.d(e,"PolylineElement",(function(){return Ot})),r.d(e,"Property",(function(){return U})),r.d(e,"QB1",(function(){return j})),r.d(e,"QB2",(function(){return z})),r.d(e,"QB3",(function(){return F})),r.d(e,"RadialGradientElement",(function(){return Rt})),r.d(e,"RectElement",(function(){return St})),r.d(e,"RenderedElement",(function(){return pt})),r.d(e,"Rotate",(function(){return J})),r.d(e,"SVGElement",(function(){return bt})),r.d(e,"SVGFontLoader",(function(){return Qt})),r.d(e,"Scale",(function(){return tt})),r.d(e,"Screen",(function(){return G})),r.d(e,"Skew",(function(){return rt})),r.d(e,"SkewX",(function(){return it})),r.d(e,"SkewY",(function(){return nt})),r.d(e,"StopElement",(function(){return kt})),r.d(e,"StyleElement",(function(){return $t})),r.d(e,"SymbolElement",(function(){return Gt})),r.d(e,"TRefElement",(function(){return Ft})),r.d(e,"TSpanElement",(function(){return mt})),r.d(e,"TextElement",(function(){return yt})),r.d(e,"TextPathElement",(function(){return Yt})),r.d(e,"TitleElement",(function(){return le})),r.d(e,"Transform",(function(){return at})),r.d(e,"Translate",(function(){return K})),r.d(e,"UnknownElement",(function(){return ot})),r.d(e,"UseElement",(function(){return Zt})),r.d(e,"ViewPort",(function(){return H})),r.d(e,"compressSpaces",(function(){return p})),r.d(e,"getSelectorSpecificity",(function(){return N})),r.d(e,"normalizeAttributeName",(function(){return x})),r.d(e,"normalizeColor",(function(){return S})),r.d(e,"parseExternalUrl",(function(){return b})),r.d(e,"presets",(function(){return g})),r.d(e,"toNumbers",(function(){return y})),r.d(e,"trimLeft",(function(){return d})),r.d(e,"trimRight",(function(){return v})),r.d(e,"vectorMagnitude",(function(){return V})),r.d(e,"vectorsAngle",(function(){return k})),r.d(e,"vectorsRatio",(function(){return R}));r(784);var i=r(814),n=r.n(i),a=(r(815),r(822),r(824),r(779),r(829),r(31)),s=r.n(a),o=(r(832),r(834),r(835),r(411)),u=r.n(o),h=(r(836),r(839)),c=r.n(h),l=(r(840),r(841),r(842),r(844)),f=(r(845),r(846));var g=Object.freeze({__proto__:null,offscreen:function(){var{DOMParser:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:t,createCanvas:(t,e)=>new OffscreenCanvas(t,e),createImage:t=>n()((function*(){var e=yield fetch(t),r=yield e.blob();return yield createImageBitmap(r)}))()};return"undefined"==typeof DOMParser&&void 0!==t||Reflect.deleteProperty(e,"DOMParser"),e},node:function(t){var{DOMParser:e,canvas:r,fetch:i}=t;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,fetch:i,createCanvas:r.createCanvas,createImage:r.loadImage}}});function p(t){return t.replace(/(?!\u3000)\s+/gm," ")}function d(t){return t.replace(/^[\n \t]+/,"")}function v(t){return t.replace(/[\n \t]+$/,"")}function y(t){return((t||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[]).map(parseFloat)}var m=/^[A-Z-]+$/;function x(t){return m.test(t)?t.toLowerCase():t}function b(t){var e=/url\(('([^']+)'|"([^"]+)"|([^'")]+))\)/.exec(t)||[];return e[2]||e[3]||e[4]}function S(t){if(!t.startsWith("rgb"))return t;var e=3;return t.replace(/\d+(\.\d+)?/g,(t,r)=>e--&&r?String(Math.round(parseFloat(t))):t)}var w=/(\[[^\]]+\])/g,A=/(#[^\s+>~.[:]+)/g,T=/(\.[^\s+>~.[:]+)/g,O=/(::[^\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi,P=/(:[\w-]+\([^)]*\))/gi,E=/(:[^\s+>~.[:]+)/g,C=/([^\s+>~.[:]+)/g;function M(t,e){var r=e.exec(t);return r?[t.replace(e," "),r.length]:[t,0]}function N(t){var e=[0,0,0],r=t.replace(/:not\(([^)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),i=0;return[r,i]=M(r,w),e[1]+=i,[r,i]=M(r,A),e[0]+=i,[r,i]=M(r,T),e[1]+=i,[r,i]=M(r,O),e[2]+=i,[r,i]=M(r,P),e[1]+=i,[r,i]=M(r,E),e[1]+=i,r=r.replace(/[*\s+>~]/g," ").replace(/[#.]/g," "),[r,i]=M(r,C),e[2]+=i,e.join("")}var _=1e-8;function V(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2))}function R(t,e){return(t[0]*e[0]+t[1]*e[1])/(V(t)*V(e))}function k(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(R(t,e))}function I(t){return t*t*t}function L(t){return 3*t*t*(1-t)}function D(t){return 3*t*(1-t)*(1-t)}function B(t){return(1-t)*(1-t)*(1-t)}function j(t){return t*t}function z(t){return 2*t*(1-t)}function F(t){return(1-t)*(1-t)}class U{constructor(t,e,r){this.document=t,this.name=e,this.value=r,this.isNormalizedColor=!1}static empty(t){return new U(t,"EMPTY","")}split(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",{document:e,name:r}=this;return p(this.getString()).trim().split(t).map(t=>new U(e,r,t))}hasValue(t){var{value:e}=this;return null!==e&&""!==e&&(t||0!==e)&&void 0!==e}isString(t){var{value:e}=this,r="string"==typeof e;return r&&t?t.test(e):r}isUrlDefinition(){return this.isString(/^url\(/)}isPixels(){if(!this.hasValue())return!1;var t=this.getString();switch(!0){case t.endsWith("px"):case/^[0-9]+$/.test(t):return!0;default:return!1}}setValue(t){return this.value=t,this}getValue(t){return void 0===t||this.hasValue()?this.value:t}getNumber(t){if(!this.hasValue())return void 0===t?0:parseFloat(t);var{value:e}=this,r=parseFloat(e);return this.isString(/%$/)&&(r/=100),r}getString(t){return void 0===t||this.hasValue()?void 0===this.value?"":String(this.value):String(t)}getColor(t){var e=this.getString(t);return this.isNormalizedColor||(this.isNormalizedColor=!0,e=S(e),this.value=e),e}getDpi(){return 96}getRem(){return this.document.rootEmSize}getEm(){return this.document.emSize}getUnits(){return this.getString().replace(/[0-9.-]/g,"")}getPixels(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var[r,i]="boolean"==typeof t?[void 0,t]:[t],{viewPort:n}=this.document.screen;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(n.computeSize("x"),n.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(n.computeSize("x"),n.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*n.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*n.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&i:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*n.computeSize(r);default:var a=this.getNumber();return e&&a<1?a*n.computeSize(r):a}}getMilliseconds(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}getRadians(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}getDefinition(){var t=this.getString(),e=/#([^)'"]+)/.exec(t);return e&&(e=e[1]),e||(e=t),this.document.definitions[e]}getFillStyleDefinition(t,e){var r=this.getDefinition();if(!r)return null;if("function"==typeof r.createGradient)return r.createGradient(this.document.ctx,t,e);if("function"==typeof r.createPattern){if(r.getHrefAttribute().hasValue()){var i=r.getAttribute("patternTransform");r=r.getHrefAttribute().getDefinition(),i.hasValue()&&r.getAttribute("patternTransform",!0).setValue(i.value)}return r.createPattern(this.document.ctx,t,e)}return null}getTextBaseline(){return this.hasValue()?U.textBaselineMapping[this.getString()]:null}addOpacity(t){for(var e=this.getColor(),r=e.length,i=0,n=0;n<r&&(","===e[n]&&i++,3!==i);n++);if(t.hasValue()&&this.isString()&&3!==i){var a=new c.a(e);a.ok&&(a.alpha=t.getNumber(),e=a.toRGBA())}return new U(this.document,this.name,e)}}U.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};class H{constructor(){this.viewPorts=[]}clear(){this.viewPorts=[]}setCurrent(t,e){this.viewPorts.push({width:t,height:e})}removeCurrent(){this.viewPorts.pop()}getCurrent(){var{viewPorts:t}=this;return t[t.length-1]}get width(){return this.getCurrent().width}get height(){return this.getCurrent().height}computeSize(t){return"number"==typeof t?t:"x"===t?this.width:"y"===t?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}}class X{constructor(t,e){this.x=t,this.y=e}static parse(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,[r=e,i=e]=y(t);return new X(r,i)}static parseScale(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,[r=e,i=r]=y(t);return new X(r,i)}static parsePath(t){for(var e=y(t),r=e.length,i=[],n=0;n<r;n+=2)i.push(new X(e[n],e[n+1]));return i}angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}applyTransform(t){var{x:e,y:r}=this,i=e*t[0]+r*t[2]+t[4],n=e*t[1]+r*t[3]+t[5];this.x=i,this.y=n}}class Y{constructor(t){this.screen=t,this.working=!1,this.events=[],this.eventElements=[],this.onClick=this.onClick.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}isWorking(){return this.working}start(){if(!this.working){var{screen:t,onClick:e,onMouseMove:r}=this,i=t.ctx.canvas;i.onclick=e,i.onmousemove=r,this.working=!0}}stop(){if(this.working){var t=this.screen.ctx.canvas;this.working=!1,t.onclick=null,t.onmousemove=null}}hasEvents(){return this.working&&this.events.length>0}runEvents(){if(this.working){var{screen:t,events:e,eventElements:r}=this,{style:i}=t.ctx.canvas;i&&(i.cursor=""),e.forEach((t,e)=>{for(var{run:i}=t,n=r[e];n;)i(n),n=n.parent}),this.events=[],this.eventElements=[]}}checkPath(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInPath&&e.isPointInPath(a,s)&&(i[n]=t)})}}checkBoundingBox(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInBox(a,s)&&(i[n]=t)})}}mapXY(t,e){for(var{window:r,ctx:i}=this.screen,n=new X(t,e),a=i.canvas;a;)n.x-=a.offsetLeft,n.y-=a.offsetTop,a=a.offsetParent;return r.scrollX&&(n.x+=r.scrollX),r.scrollY&&(n.y+=r.scrollY),n}onClick(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onclick",x:e,y:r,run(t){t.onClick&&t.onClick()}})}onMouseMove(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onmousemove",x:e,y:r,run(t){t.onMouseMove&&t.onMouseMove()}})}}var W="undefined"!=typeof window?window:null,q="undefined"!=typeof fetch?fetch.bind(void 0):null;class G{constructor(t){var{fetch:e=q,window:r=W}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.ctx=t,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new H,this.mouse=new Y(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=r,this.fetch=e}wait(t){this.waits.push(t)}ready(){return this.readyPromise?this.readyPromise:Promise.resolve()}isReady(){if(this.isReadyLock)return!0;var t=this.waits.every(t=>t());return t&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=t,t}setDefaults(t){t.strokeStyle="rgba(0,0,0,0)",t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4}setViewBox(t){var{document:e,ctx:r,aspectRatio:i,width:n,desiredWidth:a,height:s,desiredHeight:o,minX:u=0,minY:h=0,refX:c,refY:l,clip:f=!1,clipX:g=0,clipY:d=0}=t,v=p(i).replace(/^defer\s/,""),[y,m]=v.split(" "),x=y||"xMidYMid",b=m||"meet",S=n/a,w=s/o,A=Math.min(S,w),T=Math.max(S,w),O=a,P=o;"meet"===b&&(O*=A,P*=A),"slice"===b&&(O*=T,P*=T);var E=new U(e,"refX",c),C=new U(e,"refY",l),M=E.hasValue()&&C.hasValue();if(M&&r.translate(-A*E.getPixels("x"),-A*C.getPixels("y")),f){var N=A*g,_=A*d;r.beginPath(),r.moveTo(N,_),r.lineTo(n,_),r.lineTo(n,s),r.lineTo(N,s),r.closePath(),r.clip()}if(!M){var V="meet"===b&&A===w,R="slice"===b&&T===w,k="meet"===b&&A===S,I="slice"===b&&T===S;x.startsWith("xMid")&&(V||R)&&r.translate(n/2-O/2,0),x.endsWith("YMid")&&(k||I)&&r.translate(0,s/2-P/2),x.startsWith("xMax")&&(V||R)&&r.translate(n-O,0),x.endsWith("YMax")&&(k||I)&&r.translate(0,s-P)}switch(!0){case"none"===x:r.scale(S,w);break;case"meet"===b:r.scale(A,A);break;case"slice"===b:r.scale(T,T)}r.translate(-u,-h)}start(t){var{enableRedraw:e=!1,ignoreMouse:r=!1,ignoreAnimation:i=!1,ignoreDimensions:n=!1,ignoreClear:a=!1,forceRedraw:s,scaleWidth:o,scaleHeight:h,offsetX:c,offsetY:l}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{FRAMERATE:f,mouse:g}=this,p=1e3/f;if(this.frameDuration=p,this.readyPromise=new Promise(t=>{this.resolveReady=t}),this.isReady()&&this.render(t,n,a,o,h,c,l),e){var d=Date.now(),v=d,y=0,m=()=>{d=Date.now(),(y=d-v)>=p&&(v=d-y%p,this.shouldUpdate(i,s)&&(this.render(t,n,a,o,h,c,l),g.runEvents())),this.intervalId=u()(m)};r||g.start(),this.intervalId=u()(m)}}stop(){this.intervalId&&(u.a.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}shouldUpdate(t,e){if(!t){var{frameDuration:r}=this;if(this.animations.reduce((t,e)=>e.update(r)||t,!1))return!0}return!("function"!=typeof e||!e())||(!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents())}render(t,e,r,i,n,a,s){var{CLIENT_WIDTH:o,CLIENT_HEIGHT:u,viewPort:h,ctx:c,isFirstRender:l}=this,f=c.canvas;h.clear(),f.width&&f.height?h.setCurrent(f.width,f.height):h.setCurrent(o,u);var g=t.getStyle("width"),p=t.getStyle("height");!e&&(l||"number"!=typeof i&&"number"!=typeof n)&&(g.hasValue()&&(f.width=g.getPixels("x"),f.style&&(f.style.width="".concat(f.width,"px"))),p.hasValue()&&(f.height=p.getPixels("y"),f.style&&(f.style.height="".concat(f.height,"px"))));var d=f.clientWidth||f.width,v=f.clientHeight||f.height;if(e&&g.hasValue()&&p.hasValue()&&(d=g.getPixels("x"),v=p.getPixels("y")),h.setCurrent(d,v),"number"==typeof a&&t.getAttribute("x",!0).setValue(a),"number"==typeof s&&t.getAttribute("y",!0).setValue(s),"number"==typeof i||"number"==typeof n){var m=y(t.getAttribute("viewBox").getString()),x=0,b=0;if("number"==typeof i){var S=t.getStyle("width");S.hasValue()?x=S.getPixels("x")/i:isNaN(m[2])||(x=m[2]/i)}if("number"==typeof n){var w=t.getStyle("height");w.hasValue()?b=w.getPixels("y")/n:isNaN(m[3])||(b=m[3]/n)}x||(x=b),b||(b=x),t.getAttribute("width",!0).setValue(i),t.getAttribute("height",!0).setValue(n);var A=t.getStyle("transform",!0,!0);A.setValue("".concat(A.getString()," scale(").concat(1/x,", ").concat(1/b,")"))}r||c.clearRect(0,0,d,v),t.render(c),l&&(this.isFirstRender=!1)}}G.defaultWindow=W,G.defaultFetch=q;var{defaultFetch:Q}=G,$="undefined"!=typeof DOMParser?DOMParser:null;class Z{constructor(){var{fetch:t=Q,DOMParser:e=$}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.fetch=t,this.DOMParser=e}parse(t){var e=this;return n()((function*(){return t.startsWith("<")?e.parseFromString(t):e.load(t)}))()}parseFromString(t){var e=new this.DOMParser;try{return this.checkDocument(e.parseFromString(t,"image/svg+xml"))}catch(r){return this.checkDocument(e.parseFromString(t,"text/xml"))}}checkDocument(t){var e=t.getElementsByTagName("parsererror")[0];if(e)throw new Error(e.textContent);return t}load(t){var e=this;return n()((function*(){var r=yield e.fetch(t),i=yield r.text();return e.parseFromString(i)}))()}}class K{constructor(t,e){this.type="translate",this.point=null,this.point=X.parse(e)}apply(t){var{x:e,y:r}=this.point;t.translate(e||0,r||0)}unapply(t){var{x:e,y:r}=this.point;t.translate(-1*e||0,-1*r||0)}applyToPoint(t){var{x:e,y:r}=this.point;t.applyTransform([1,0,0,1,e||0,r||0])}}class J{constructor(t,e,r){this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var i=y(e);this.angle=new U(t,"angle",i[0]),this.originX=r[0],this.originY=r[1],this.cx=i[1]||0,this.cy=i[2]||0}apply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(a.getRadians()),t.translate(-s,-o)}unapply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(-1*a.getRadians()),t.translate(-s,-o)}applyToPoint(t){var{cx:e,cy:r,angle:i}=this,n=i.getRadians();t.applyTransform([1,0,0,1,e||0,r||0]),t.applyTransform([Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n),0,0]),t.applyTransform([1,0,0,1,-e||0,-r||0])}}class tt{constructor(t,e,r){this.type="scale",this.scale=null,this.originX=null,this.originY=null;var i=X.parseScale(e);0!==i.x&&0!==i.y||(i.x=_,i.y=_),this.scale=i,this.originX=r[0],this.originY=r[1]}apply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(e,r||e),t.translate(-a,-s)}unapply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(1/e,1/r||e),t.translate(-a,-s)}applyToPoint(t){var{x:e,y:r}=this.scale;t.applyTransform([e||0,0,0,r||0,0,0])}}class et{constructor(t,e,r){this.type="matrix",this.matrix=[],this.originX=null,this.originY=null,this.matrix=y(e),this.originX=r[0],this.originY=r[1]}apply(t){var{originX:e,originY:r,matrix:i}=this,n=e.getPixels("x"),a=r.getPixels("y");t.translate(n,a),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),t.translate(-n,-a)}unapply(t){var{originX:e,originY:r,matrix:i}=this,n=i[0],a=i[2],s=i[4],o=i[1],u=i[3],h=i[5],c=1/(n*(1*u-0*h)-a*(1*o-0*h)+s*(0*o-0*u)),l=e.getPixels("x"),f=r.getPixels("y");t.translate(l,f),t.transform(c*(1*u-0*h),c*(0*h-1*o),c*(0*s-1*a),c*(1*n-0*s),c*(a*h-s*u),c*(s*o-n*h)),t.translate(-l,-f)}applyToPoint(t){t.applyTransform(this.matrix)}}class rt extends et{constructor(t,e,r){super(t,e,r),this.type="skew",this.angle=null,this.angle=new U(t,"angle",e)}}class it extends rt{constructor(t,e,r){super(t,e,r),this.type="skewX",this.matrix=[1,0,Math.tan(this.angle.getRadians()),1,0,0]}}class nt extends rt{constructor(t,e,r){super(t,e,r),this.type="skewY",this.matrix=[1,Math.tan(this.angle.getRadians()),0,1,0,0]}}class at{constructor(t,e,r){this.document=t,this.transforms=[],function(t){return p(t).trim().replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(e).forEach(t=>{if("none"!==t){var[e,i]=function(t){var[e,r]=t.split("(");return[e.trim(),r.trim().replace(")","")]}(t),n=at.transformTypes[e];void 0!==n&&this.transforms.push(new n(this.document,i,r))}})}static fromElement(t,e){var r=e.getStyle("transform",!1,!0),[i,n=i]=e.getStyle("transform-origin",!1,!0).split(),a=[i,n];return r.hasValue()?new at(t,r.getString(),a):null}apply(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].apply(t)}unapply(t){for(var{transforms:e}=this,r=e.length-1;r>=0;r--)e[r].unapply(t)}applyToPoint(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].applyToPoint(t)}}at.transformTypes={translate:K,rotate:J,scale:tt,matrix:et,skewX:it,skewY:nt};class st{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.document=t,this.node=e,this.captureTextNodes=r,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],e&&1===e.nodeType){if(Array.from(e.attributes).forEach(e=>{var r=x(e.nodeName);this.attributes[r]=new U(t,r,e.value)}),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue())this.getAttribute("style").getString().split(";").map(t=>t.trim()).forEach(e=>{if(e){var[r,i]=e.split(":").map(t=>t.trim());this.styles[r]=new U(t,r,i)}});var{definitions:i}=t,n=this.getAttribute("id");n.hasValue()&&(i[n.getString()]||(i[n.getString()]=this)),Array.from(e.childNodes).forEach(e=>{if(1===e.nodeType)this.addChild(e);else if(r&&(3===e.nodeType||4===e.nodeType)){var i=t.createTextNode(e);i.getText().length>0&&this.addChild(i)}})}}getAttribute(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.attributes[t];if(!r&&e){var i=new U(this.document,t,"");return this.attributes[t]=i,i}return r||U.empty(this.document)}getHrefAttribute(){for(var t in this.attributes)if("href"===t||t.endsWith(":href"))return this.attributes[t];return U.empty(this.document)}getStyle(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.styles[t];if(i)return i;var n=this.getAttribute(t);if(null!=n&&n.hasValue())return this.styles[t]=n,n;if(!r){var{parent:a}=this;if(a){var s=a.getStyle(t);if(null!=s&&s.hasValue())return s}}if(e){var o=new U(this.document,t,"");return this.styles[t]=o,o}return i||U.empty(this.document)}render(t){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(t.save(),this.getStyle("mask").hasValue()){var e=this.getStyle("mask").getDefinition();e&&(this.applyEffects(t),e.apply(t,this))}else if("none"!==this.getStyle("filter").getValue("none")){var r=this.getStyle("filter").getDefinition();r&&(this.applyEffects(t),r.apply(t,this))}else this.setContext(t),this.renderChildren(t),this.clearContext(t);t.restore()}}setContext(t){}applyEffects(t){var e=at.fromElement(this.document,this);e&&e.apply(t);var r=this.getStyle("clip-path",!1,!0);if(r.hasValue()){var i=r.getDefinition();i&&i.apply(t)}}clearContext(t){}renderChildren(t){this.children.forEach(e=>{e.render(t)})}addChild(t){var e=t instanceof st?t:this.document.createElement(t);e.parent=this,st.ignoreChildTypes.includes(e.type)||this.children.push(e)}matchesSelector(t){var{node:e}=this;if("function"==typeof e.matches)return e.matches(t);var r=e.getAttribute("class");return!(!r||""===r)&&r.split(" ").some(e=>".".concat(e)===t)}addStylesFromStyleDefinition(){var{styles:t,stylesSpecificity:e}=this.document;for(var r in t)if(!r.startsWith("@")&&this.matchesSelector(r)){var i=t[r],n=e[r];if(i)for(var a in i){var s=this.stylesSpecificity[a];void 0===s&&(s="000"),n>=s&&(this.styles[a]=i[a],this.stylesSpecificity[a]=n)}}}removeStyles(t,e){return e.reduce((e,r)=>{var i=t.getStyle(r);if(!i.hasValue())return e;var n=i.getString();return i.setValue(""),[...e,[r,n]]},[])}restoreStyles(t,e){e.forEach(e=>{var[r,i]=e;t.getStyle(r,!0).setValue(i)})}}st.ignoreChildTypes=["title"];class ot extends st{constructor(t,e,r){super(t,e,r)}}function ut(t){var e=t.trim();return/^('|")/.test(e)?e:'"'.concat(e,'"')}function ht(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return e;default:return/^oblique\s+(-|)\d+deg$/.test(e)?e:""}}function ct(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return e;default:return/^[\d.]+$/.test(e)?e:""}}class lt{constructor(t,e,r,i,n,a){var s=a?"string"==typeof a?lt.parse(a):a:{};this.fontFamily=n||s.fontFamily,this.fontSize=i||s.fontSize,this.fontStyle=t||s.fontStyle,this.fontWeight=r||s.fontWeight,this.fontVariant=e||s.fontVariant}static parse(){var t=arguments.length>1?arguments[1]:void 0,e="",r="",i="",n="",a="",s=p(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").trim().split(" "),o={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return s.forEach(t=>{switch(!0){case!o.fontStyle&&lt.styles.includes(t):"inherit"!==t&&(e=t),o.fontStyle=!0;break;case!o.fontVariant&&lt.variants.includes(t):"inherit"!==t&&(r=t),o.fontStyle=!0,o.fontVariant=!0;break;case!o.fontWeight&&lt.weights.includes(t):"inherit"!==t&&(i=t),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0;break;case!o.fontSize:"inherit"!==t&&([n]=t.split("/")),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0,o.fontSize=!0;break;default:"inherit"!==t&&(a+=t)}}),new lt(e,r,i,n,a,t)}toString(){return[ht(this.fontStyle),this.fontVariant,ct(this.fontWeight),this.fontSize,(e=this.fontFamily,void 0===t?e:e.trim().split(",").map(ut).join(","))].join(" ").trim();var e}}lt.styles="normal|italic|oblique|inherit",lt.variants="normal|small-caps|inherit",lt.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";class ft{constructor(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;this.x1=t,this.y1=e,this.x2=r,this.y2=i,this.addPoint(t,e),this.addPoint(r,i)}get x(){return this.x1}get y(){return this.y1}get width(){return this.x2-this.x1}get height(){return this.y2-this.y1}addPoint(t,e){void 0!==t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),void 0!==e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))}addX(t){this.addPoint(t,null)}addY(t){this.addPoint(null,t)}addBoundingBox(t){if(t){var{x1:e,y1:r,x2:i,y2:n}=t;this.addPoint(e,r),this.addPoint(i,n)}}sumCubic(t,e,r,i,n){return Math.pow(1-t,3)*e+3*Math.pow(1-t,2)*t*r+3*(1-t)*Math.pow(t,2)*i+Math.pow(t,3)*n}bezierCurveAdd(t,e,r,i,n){var a=6*e-12*r+6*i,s=-3*e+9*r-9*i+3*n,o=3*r-3*e;if(0!==s){var u=Math.pow(a,2)-4*o*s;if(!(u<0)){var h=(-a+Math.sqrt(u))/(2*s);0<h&&h<1&&(t?this.addX(this.sumCubic(h,e,r,i,n)):this.addY(this.sumCubic(h,e,r,i,n)));var c=(-a-Math.sqrt(u))/(2*s);0<c&&c<1&&(t?this.addX(this.sumCubic(c,e,r,i,n)):this.addY(this.sumCubic(c,e,r,i,n)))}}else{if(0===a)return;var l=-o/a;0<l&&l<1&&(t?this.addX(this.sumCubic(l,e,r,i,n)):this.addY(this.sumCubic(l,e,r,i,n)))}}addBezierCurve(t,e,r,i,n,a,s,o){this.addPoint(t,e),this.addPoint(s,o),this.bezierCurveAdd(!0,t,r,n,s),this.bezierCurveAdd(!1,e,i,a,o)}addQuadraticCurve(t,e,r,i,n,a){var s=t+2/3*(r-t),o=e+2/3*(i-e),u=s+1/3*(n-t),h=o+1/3*(a-e);this.addBezierCurve(t,e,s,u,o,h,n,a)}isPointInBox(t,e){var{x1:r,y1:i,x2:n,y2:a}=this;return r<=t&&t<=n&&i<=e&&e<=a}}class gt extends l.a{constructor(t){super(t.replace(/([+\-.])\s+/gm,"$1").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,"")),this.control=null,this.start=null,this.current=null,this.command=null,this.commands=this.commands,this.i=-1,this.previousCommand=null,this.points=[],this.angles=[]}reset(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new X(0,0),this.control=new X(0,0),this.current=new X(0,0),this.points=[],this.angles=[]}isEnd(){var{i:t,commands:e}=this;return t>=e.length-1}next(){var t=this.commands[++this.i];return this.previousCommand=this.command,this.command=t,t}getPoint(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",r=new X(this.command[t],this.command[e]);return this.makeAbsolute(r)}getAsControlPoint(t,e){var r=this.getPoint(t,e);return this.control=r,r}getAsCurrentPoint(t,e){var r=this.getPoint(t,e);return this.current=r,r}getReflectedControlPoint(){var t=this.previousCommand.type;if(t!==l.a.CURVE_TO&&t!==l.a.SMOOTH_CURVE_TO&&t!==l.a.QUAD_TO&&t!==l.a.SMOOTH_QUAD_TO)return this.current;var{current:{x:e,y:r},control:{x:i,y:n}}=this;return new X(2*e-i,2*r-n)}makeAbsolute(t){if(this.command.relative){var{x:e,y:r}=this.current;t.x+=e,t.y+=r}return t}addMarker(t,e,r){var{points:i,angles:n}=this;r&&n.length>0&&!n[n.length-1]&&(n[n.length-1]=i[i.length-1].angleTo(r)),this.addMarkerAngle(t,e?e.angleTo(t):null)}addMarkerAngle(t,e){this.points.push(t),this.angles.push(e)}getMarkerPoints(){return this.points}getMarkerAngles(){for(var{angles:t}=this,e=t.length,r=0;r<e;r++)if(!t[r])for(var i=r+1;i<e;i++)if(t[i]){t[r]=t[i];break}return t}}class pt extends st{constructor(){super(...arguments),this.modifiedEmSizeStack=!1}calculateOpacity(){for(var t=1,e=this;e;){var r=e.getStyle("opacity",!1,!0);r.hasValue(!0)&&(t*=r.getNumber()),e=e.parent}return t}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e){var r=this.getStyle("fill"),i=this.getStyle("fill-opacity"),n=this.getStyle("stroke"),a=this.getStyle("stroke-opacity");if(r.isUrlDefinition()){var s=r.getFillStyleDefinition(this,i);s&&(t.fillStyle=s)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var o=r.getColor();"inherit"!==o&&(t.fillStyle="none"===o?"rgba(0,0,0,0)":o)}if(i.hasValue()){var u=new U(this.document,"fill",t.fillStyle).addOpacity(i).getColor();t.fillStyle=u}if(n.isUrlDefinition()){var h=n.getFillStyleDefinition(this,a);h&&(t.strokeStyle=h)}else if(n.hasValue()){"currentColor"===n.getString()&&n.setValue(this.getStyle("color").getColor());var c=n.getString();"inherit"!==c&&(t.strokeStyle="none"===c?"rgba(0,0,0,0)":c)}if(a.hasValue()){var l=new U(this.document,"stroke",t.strokeStyle).addOpacity(a).getString();t.strokeStyle=l}var f=this.getStyle("stroke-width");if(f.hasValue()){var g=f.getPixels();t.lineWidth=g||_}var p=this.getStyle("stroke-linecap"),d=this.getStyle("stroke-linejoin"),v=this.getStyle("stroke-miterlimit"),m=this.getStyle("stroke-dasharray"),x=this.getStyle("stroke-dashoffset");if(p.hasValue()&&(t.lineCap=p.getString()),d.hasValue()&&(t.lineJoin=d.getString()),v.hasValue()&&(t.miterLimit=v.getNumber()),m.hasValue()&&"none"!==m.getString()){var b=y(m.getString());void 0!==t.setLineDash?t.setLineDash(b):void 0!==t.webkitLineDash?t.webkitLineDash=b:void 0===t.mozDash||1===b.length&&0===b[0]||(t.mozDash=b);var S=x.getPixels();void 0!==t.lineDashOffset?t.lineDashOffset=S:void 0!==t.webkitLineDashOffset?t.webkitLineDashOffset=S:void 0!==t.mozDashOffset&&(t.mozDashOffset=S)}}if(this.modifiedEmSizeStack=!1,void 0!==t.font){var w=this.getStyle("font"),A=this.getStyle("font-style"),T=this.getStyle("font-variant"),O=this.getStyle("font-weight"),P=this.getStyle("font-size"),E=this.getStyle("font-family"),C=new lt(A.getString(),T.getString(),O.getString(),P.hasValue()?"".concat(P.getPixels(!0),"px"):"",E.getString(),lt.parse(w.getString(),t.font));A.setValue(C.fontStyle),T.setValue(C.fontVariant),O.setValue(C.fontWeight),P.setValue(C.fontSize),E.setValue(C.fontFamily),t.font=C.toString(),P.isPixels()&&(this.document.emSize=P.getPixels(),this.modifiedEmSizeStack=!0)}e||(this.applyEffects(t),t.globalAlpha=this.calculateOpacity())}clearContext(t){super.clearContext(t),this.modifiedEmSizeStack&&this.document.popEmSize()}}class dt extends pt{constructor(t,e,r){super(t,e,r),this.type="path",this.pathParser=null,this.pathParser=new gt(this.getAttribute("d").getString())}path(t){var{pathParser:e}=this,r=new ft;for(e.reset(),t&&t.beginPath();!e.isEnd();)switch(e.next().type){case gt.MOVE_TO:this.pathM(t,r);break;case gt.LINE_TO:this.pathL(t,r);break;case gt.HORIZ_LINE_TO:this.pathH(t,r);break;case gt.VERT_LINE_TO:this.pathV(t,r);break;case gt.CURVE_TO:this.pathC(t,r);break;case gt.SMOOTH_CURVE_TO:this.pathS(t,r);break;case gt.QUAD_TO:this.pathQ(t,r);break;case gt.SMOOTH_QUAD_TO:this.pathT(t,r);break;case gt.ARC:this.pathA(t,r);break;case gt.CLOSE_PATH:this.pathZ(t,r)}return r}getBoundingBox(t){return this.path()}getMarkers(){var{pathParser:t}=this,e=t.getMarkerPoints(),r=t.getMarkerAngles();return e.map((t,e)=>[t,r[e]])}renderChildren(t){this.path(t),this.document.screen.mouse.checkPath(this,t);var e=this.getStyle("fill-rule");""!==t.fillStyle&&("inherit"!==e.getString("inherit")?t.fill(e.getString()):t.fill()),""!==t.strokeStyle&&("non-scaling-stroke"===this.getAttribute("vector-effect").getString()?(t.save(),t.setTransform(1,0,0,1,0,0),t.stroke(),t.restore()):t.stroke());var r=this.getMarkers();if(r){var i=r.length-1,n=this.getStyle("marker-start"),a=this.getStyle("marker-mid"),s=this.getStyle("marker-end");if(n.isUrlDefinition()){var o=n.getDefinition(),[u,h]=r[0];o.render(t,u,h)}if(a.isUrlDefinition())for(var c=a.getDefinition(),l=1;l<i;l++){var[f,g]=r[l];c.render(t,f,g)}if(s.isUrlDefinition()){var p=s.getDefinition(),[d,v]=r[i];p.render(t,d,v)}}}static pathM(t){var e=t.getAsCurrentPoint();return t.start=t.current,{point:e}}pathM(t,e){var{pathParser:r}=this,{point:i}=dt.pathM(r),{x:n,y:a}=i;r.addMarker(i),e.addPoint(n,a),t&&t.moveTo(n,a)}static pathL(t){var{current:e}=t;return{current:e,point:t.getAsCurrentPoint()}}pathL(t,e){var{pathParser:r}=this,{current:i,point:n}=dt.pathL(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathH(t){var{current:e,command:r}=t,i=new X((r.relative?e.x:0)+r.x,e.y);return t.current=i,{current:e,point:i}}pathH(t,e){var{pathParser:r}=this,{current:i,point:n}=dt.pathH(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathV(t){var{current:e,command:r}=t,i=new X(e.x,(r.relative?e.y:0)+r.y);return t.current=i,{current:e,point:i}}pathV(t,e){var{pathParser:r}=this,{current:i,point:n}=dt.pathV(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathC(t){var{current:e}=t;return{current:e,point:t.getPoint("x1","y1"),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathC(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=dt.pathC(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathS(t){var{current:e}=t;return{current:e,point:t.getReflectedControlPoint(),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathS(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=dt.pathS(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathQ(t){var{current:e}=t;return{current:e,controlPoint:t.getAsControlPoint("x1","y1"),currentPoint:t.getAsCurrentPoint()}}pathQ(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=dt.pathQ(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathT(t){var{current:e}=t,r=t.getReflectedControlPoint();return t.control=r,{current:e,controlPoint:r,currentPoint:t.getAsCurrentPoint()}}pathT(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=dt.pathT(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathA(t){var{current:e,command:r}=t,{rX:i,rY:n,xRot:a,lArcFlag:s,sweepFlag:o}=r,u=a*(Math.PI/180),h=t.getAsCurrentPoint(),c=new X(Math.cos(u)*(e.x-h.x)/2+Math.sin(u)*(e.y-h.y)/2,-Math.sin(u)*(e.x-h.x)/2+Math.cos(u)*(e.y-h.y)/2),l=Math.pow(c.x,2)/Math.pow(i,2)+Math.pow(c.y,2)/Math.pow(n,2);l>1&&(i*=Math.sqrt(l),n*=Math.sqrt(l));var f=(s===o?-1:1)*Math.sqrt((Math.pow(i,2)*Math.pow(n,2)-Math.pow(i,2)*Math.pow(c.y,2)-Math.pow(n,2)*Math.pow(c.x,2))/(Math.pow(i,2)*Math.pow(c.y,2)+Math.pow(n,2)*Math.pow(c.x,2)));isNaN(f)&&(f=0);var g=new X(f*i*c.y/n,f*-n*c.x/i),p=new X((e.x+h.x)/2+Math.cos(u)*g.x-Math.sin(u)*g.y,(e.y+h.y)/2+Math.sin(u)*g.x+Math.cos(u)*g.y),d=k([1,0],[(c.x-g.x)/i,(c.y-g.y)/n]),v=[(c.x-g.x)/i,(c.y-g.y)/n],y=[(-c.x-g.x)/i,(-c.y-g.y)/n],m=k(v,y);return R(v,y)<=-1&&(m=Math.PI),R(v,y)>=1&&(m=0),{currentPoint:h,rX:i,rY:n,sweepFlag:o,xAxisRotation:u,centp:p,a1:d,ad:m}}pathA(t,e){var{pathParser:r}=this,{currentPoint:i,rX:n,rY:a,sweepFlag:s,xAxisRotation:o,centp:u,a1:h,ad:c}=dt.pathA(r),l=1-s?1:-1,f=h+l*(c/2),g=new X(u.x+n*Math.cos(f),u.y+a*Math.sin(f));if(r.addMarkerAngle(g,f-l*Math.PI/2),r.addMarkerAngle(i,f-l*Math.PI),e.addPoint(i.x,i.y),t&&!isNaN(h)&&!isNaN(c)){var p=n>a?n:a,d=n>a?1:n/a,v=n>a?a/n:1;t.translate(u.x,u.y),t.rotate(o),t.scale(d,v),t.arc(0,0,p,h,h+c,Boolean(1-s)),t.scale(1/d,1/v),t.rotate(-o),t.translate(-u.x,-u.y)}}static pathZ(t){t.current=t.start}pathZ(t,e){dt.pathZ(this.pathParser),t&&e.x1!==e.x2&&e.y1!==e.y2&&t.closePath()}}class vt extends dt{constructor(t,e,r){super(t,e,r),this.type="glyph",this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber(),this.unicode=this.getAttribute("unicode").getString(),this.arabicForm=this.getAttribute("arabic-form").getString()}}class yt extends pt{constructor(t,e,r){super(t,e,new.target===yt||r),this.type="text",this.x=0,this.y=0,this.measureCache=-1}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.setContext(t,e);var r=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();r&&(t.textBaseline=r)}initializeCoordinates(t){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var e=this.getAttribute("dx"),r=this.getAttribute("dy");e.hasValue()&&(this.x+=e.getPixels("x")),r.hasValue()&&(this.y+=r.getPixels("y")),this.x+=this.getAnchorDelta(t,this,0)}getBoundingBox(t){if("text"!==this.type)return this.getTElementBoundingBox(t);this.initializeCoordinates(t);var e=null;return this.children.forEach((r,i)=>{var n=this.getChildBoundingBox(t,this,this,i);e?e.addBoundingBox(n):e=n}),e}getFontSize(){var{document:t,parent:e}=this,r=lt.parse(t.ctx.font).fontSize;return e.getStyle("font-size").getNumber(r)}getTElementBoundingBox(t){var e=this.getFontSize();return new ft(this.x,this.y-e,this.x+this.measureText(t),this.y)}getGlyph(t,e,r){var i=e[r],n=null;if(t.isArabic){var a=e.length,s=e[r-1],o=e[r+1],u="isolated";if((0===r||" "===s)&&r<a-2&&" "!==o&&(u="terminal"),r>0&&" "!==s&&r<a-2&&" "!==o&&(u="medial"),r>0&&" "!==s&&(r===a-1||" "===o)&&(u="initial"),void 0!==t.glyphs[i]){var h=t.glyphs[i];n=h instanceof vt?h:h[u]}}else n=t.glyphs[i];return n||(n=t.missingGlyph),n}getText(){return""}getTextFromNode(t){var e=t||this.node,r=Array.from(e.parentNode.childNodes),i=r.indexOf(e),n=r.length-1,a=p(e.textContent||"");return 0===i&&(a=d(a)),i===n&&(a=v(a)),a}renderChildren(t){if("text"===this.type){this.initializeCoordinates(t),this.children.forEach((e,r)=>{this.renderChild(t,this,this,r)});var{mouse:e}=this.document.screen;e.isWorking()&&e.checkBoundingBox(this,this.getBoundingBox(t))}else this.renderTElementChildren(t)}renderTElementChildren(t){var{document:e,parent:r}=this,i=this.getText(),n=r.getStyle("font-family").getDefinition();if(n)for(var{unitsPerEm:a}=n.fontFace,s=lt.parse(e.ctx.font),o=r.getStyle("font-size").getNumber(s.fontSize),u=r.getStyle("font-style").getString(s.fontStyle),h=o/a,c=n.isRTL?i.split("").reverse().join(""):i,l=y(r.getAttribute("dx").getString()),f=c.length,g=0;g<f;g++){var p=this.getGlyph(n,c,g);t.translate(this.x,this.y),t.scale(h,-h);var d=t.lineWidth;t.lineWidth=t.lineWidth*a/o,"italic"===u&&t.transform(1,0,.4,1,0,0),p.render(t),"italic"===u&&t.transform(1,0,-.4,1,0,0),t.lineWidth=d,t.scale(1/h,-1/h),t.translate(-this.x,-this.y),this.x+=o*(p.horizAdvX||n.horizAdvX)/a,void 0===l[g]||isNaN(l[g])||(this.x+=l[g])}else{var{x:v,y:m}=this;t.fillStyle&&t.fillText(i,v,m),t.strokeStyle&&t.strokeText(i,v,m)}}getAnchorDelta(t,e,r){var i=this.getStyle("text-anchor").getString("start");if("start"!==i){for(var{children:n}=e,a=n.length,s=null,o=0,u=r;u<a&&(s=n[u],!(u>r&&s.getAttribute("x").hasValue()||s.getAttribute("text-anchor").hasValue()));u++)o+=s.measureTextRecursive(t);return-1*("end"===i?o:o/2)}return 0}adjustChildCoordinates(t,e,r,i){var n=r.children[i];if("function"!=typeof n.measureText)return n;t.save(),n.setContext(t,!0);var a=n.getAttribute("x"),s=n.getAttribute("y"),o=n.getAttribute("dx"),u=n.getAttribute("dy"),h=n.getAttribute("text-anchor").getString("start");if(0===i&&"textNode"!==n.type&&(a.hasValue()||a.setValue(e.getAttribute("x").getValue("0")),s.hasValue()||s.setValue(e.getAttribute("y").getValue("0")),o.hasValue()||o.setValue(e.getAttribute("dx").getValue("0")),u.hasValue()||u.setValue(e.getAttribute("dy").getValue("0"))),a.hasValue()){if(n.x=a.getPixels("x")+e.getAnchorDelta(t,r,i),"start"!==h){var c=n.measureTextRecursive(t);n.x+=-1*("end"===h?c:c/2)}o.hasValue()&&(n.x+=o.getPixels("x"))}else{if("start"!==h){var l=n.measureTextRecursive(t);e.x+=-1*("end"===h?l:l/2)}o.hasValue()&&(e.x+=o.getPixels("x")),n.x=e.x}return e.x=n.x+n.measureText(t),s.hasValue()?(n.y=s.getPixels("y"),u.hasValue()&&(n.y+=u.getPixels("y"))):(u.hasValue()&&(e.y+=u.getPixels("y")),n.y=e.y),e.y=n.y,n.clearContext(t),t.restore(),n}getChildBoundingBox(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);if("function"!=typeof n.getBoundingBox)return null;var a=n.getBoundingBox(t);return a?(n.children.forEach((r,i)=>{var s=e.getChildBoundingBox(t,e,n,i);a.addBoundingBox(s)}),a):null}renderChild(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);n.render(t),n.children.forEach((r,i)=>{e.renderChild(t,e,n,i)})}measureTextRecursive(t){return this.children.reduce((e,r)=>e+r.measureTextRecursive(t),this.measureText(t))}measureText(t){var{measureCache:e}=this;if(~e)return e;var r=this.getText(),i=this.measureTargetText(t,r);return this.measureCache=i,i}measureTargetText(t,e){if(!e.length)return 0;var{parent:r}=this,i=r.getStyle("font-family").getDefinition();if(i){for(var n=this.getFontSize(),a=i.isRTL?e.split("").reverse().join(""):e,s=y(r.getAttribute("dx").getString()),o=a.length,u=0,h=0;h<o;h++){u+=(this.getGlyph(i,a,h).horizAdvX||i.horizAdvX)*n/i.fontFace.unitsPerEm,void 0===s[h]||isNaN(s[h])||(u+=s[h])}return u}if(!t.measureText)return 10*e.length;t.save(),this.setContext(t,!0);var{width:c}=t.measureText(e);return this.clearContext(t),t.restore(),c}}class mt extends yt{constructor(t,e,r){super(t,e,new.target===mt||r),this.type="tspan",this.text=this.children.length>0?"":this.getTextFromNode()}getText(){return this.text}}class xt extends mt{constructor(){super(...arguments),this.type="textNode"}}class bt extends pt{constructor(){super(...arguments),this.type="svg",this.root=!1}setContext(t){var e,{document:r}=this,{screen:i,window:n}=r,a=t.canvas;if(i.setDefaults(t),a.style&&void 0!==t.font&&n&&void 0!==n.getComputedStyle){t.font=n.getComputedStyle(a).getPropertyValue("font");var s=new U(r,"fontSize",lt.parse(t.font).fontSize);s.hasValue()&&(r.rootEmSize=s.getPixels("y"),r.emSize=r.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var{width:o,height:u}=i.viewPort;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var h=this.getAttribute("refX"),c=this.getAttribute("refY"),l=this.getAttribute("viewBox"),f=l.hasValue()?y(l.getString()):null,g=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),p=0,d=0,v=0,m=0;f&&(p=f[0],d=f[1]),this.root||(o=this.getStyle("width").getPixels("x"),u=this.getStyle("height").getPixels("y"),"marker"===this.type&&(v=p,m=d,p=0,d=0)),i.viewPort.setCurrent(o,u),!this.node||this.parent&&"foreignObject"!==(null===(e=this.node.parentNode)||void 0===e?void 0:e.nodeName)||!this.getStyle("transform",!1,!0).hasValue()||this.getStyle("transform-origin",!1,!0).hasValue()||this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),super.setContext(t),t.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),f&&(o=f[2],u=f[3]),r.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:i.viewPort.width,desiredWidth:o,height:i.viewPort.height,desiredHeight:u,minX:p,minY:d,refX:h.getValue(),refY:c.getValue(),clip:g,clipX:v,clipY:m}),f&&(i.viewPort.removeCurrent(),i.viewPort.setCurrent(o,u))}clearContext(t){super.clearContext(t),this.document.screen.viewPort.removeCurrent()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.getAttribute("width",!0),n=this.getAttribute("height",!0),a=this.getAttribute("viewBox"),s=this.getAttribute("style"),o=i.getNumber(0),u=n.getNumber(0);if(r)if("string"==typeof r)this.getAttribute("preserveAspectRatio",!0).setValue(r);else{var h=this.getAttribute("preserveAspectRatio");h.hasValue()&&h.setValue(h.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(i.setValue(t),n.setValue(e),a.hasValue()||a.setValue("0 0 ".concat(o||t," ").concat(u||e)),s.hasValue()){var c=this.getStyle("width"),l=this.getStyle("height");c.hasValue()&&c.setValue("".concat(t,"px")),l.hasValue()&&l.setValue("".concat(e,"px"))}}}class St extends dt{constructor(){super(...arguments),this.type="rect"}path(t){var e=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),i=this.getStyle("width",!1,!0).getPixels("x"),n=this.getStyle("height",!1,!0).getPixels("y"),a=this.getAttribute("rx"),s=this.getAttribute("ry"),o=a.getPixels("x"),u=s.getPixels("y");if(a.hasValue()&&!s.hasValue()&&(u=o),s.hasValue()&&!a.hasValue()&&(o=u),o=Math.min(o,i/2),u=Math.min(u,n/2),t){var h=(Math.sqrt(2)-1)/3*4;t.beginPath(),n>0&&i>0&&(t.moveTo(e+o,r),t.lineTo(e+i-o,r),t.bezierCurveTo(e+i-o+h*o,r,e+i,r+u-h*u,e+i,r+u),t.lineTo(e+i,r+n-u),t.bezierCurveTo(e+i,r+n-u+h*u,e+i-o+h*o,r+n,e+i-o,r+n),t.lineTo(e+o,r+n),t.bezierCurveTo(e+o-h*o,r+n,e,r+n-u+h*u,e,r+n-u),t.lineTo(e,r+u),t.bezierCurveTo(e,r+u-h*u,e+o-h*o,r,e+o,r),t.closePath())}return new ft(e,r,e+i,r+n)}getMarkers(){return null}}class wt extends dt{constructor(){super(...arguments),this.type="circle"}path(t){var e=this.getAttribute("cx").getPixels("x"),r=this.getAttribute("cy").getPixels("y"),i=this.getAttribute("r").getPixels();return t&&i>0&&(t.beginPath(),t.arc(e,r,i,0,2*Math.PI,!1),t.closePath()),new ft(e-i,r-i,e+i,r+i)}getMarkers(){return null}}class At extends dt{constructor(){super(...arguments),this.type="ellipse"}path(t){var e=(Math.sqrt(2)-1)/3*4,r=this.getAttribute("rx").getPixels("x"),i=this.getAttribute("ry").getPixels("y"),n=this.getAttribute("cx").getPixels("x"),a=this.getAttribute("cy").getPixels("y");return t&&r>0&&i>0&&(t.beginPath(),t.moveTo(n+r,a),t.bezierCurveTo(n+r,a+e*i,n+e*r,a+i,n,a+i),t.bezierCurveTo(n-e*r,a+i,n-r,a+e*i,n-r,a),t.bezierCurveTo(n-r,a-e*i,n-e*r,a-i,n,a-i),t.bezierCurveTo(n+e*r,a-i,n+r,a-e*i,n+r,a),t.closePath()),new ft(n-r,a-i,n+r,a+i)}getMarkers(){return null}}class Tt extends dt{constructor(){super(...arguments),this.type="line"}getPoints(){return[new X(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new X(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}path(t){var[{x:e,y:r},{x:i,y:n}]=this.getPoints();return t&&(t.beginPath(),t.moveTo(e,r),t.lineTo(i,n)),new ft(e,r,i,n)}getMarkers(){var[t,e]=this.getPoints(),r=t.angleTo(e);return[[t,r],[e,r]]}}class Ot extends dt{constructor(t,e,r){super(t,e,r),this.type="polyline",this.points=[],this.points=X.parsePath(this.getAttribute("points").getString())}path(t){var{points:e}=this,[{x:r,y:i}]=e,n=new ft(r,i);return t&&(t.beginPath(),t.moveTo(r,i)),e.forEach(e=>{var{x:r,y:i}=e;n.addPoint(r,i),t&&t.lineTo(r,i)}),n}getMarkers(){var{points:t}=this,e=t.length-1,r=[];return t.forEach((i,n)=>{n!==e&&r.push([i,i.angleTo(t[n+1])])}),r.length>0&&r.push([t[t.length-1],r[r.length-1][1]]),r}}class Pt extends Ot{constructor(){super(...arguments),this.type="polygon"}path(t){var e=super.path(t),[{x:r,y:i}]=this.points;return t&&(t.lineTo(r,i),t.closePath()),e}}class Et extends st{constructor(){super(...arguments),this.type="pattern"}createPattern(t,e,r){var i=this.getStyle("width").getPixels("x",!0),n=this.getStyle("height").getPixels("y",!0),a=new bt(this.document,null);a.attributes.viewBox=new U(this.document,"viewBox",this.getAttribute("viewBox").getValue()),a.attributes.width=new U(this.document,"width","".concat(i,"px")),a.attributes.height=new U(this.document,"height","".concat(n,"px")),a.attributes.transform=new U(this.document,"transform",this.getAttribute("patternTransform").getValue()),a.children=this.children;var s=this.document.createCanvas(i,n),o=s.getContext("2d"),u=this.getAttribute("x"),h=this.getAttribute("y");u.hasValue()&&h.hasValue()&&o.translate(u.getPixels("x",!0),h.getPixels("y",!0)),r.hasValue()?this.styles["fill-opacity"]=r:Reflect.deleteProperty(this.styles,"fill-opacity");for(var c=-1;c<=1;c++)for(var l=-1;l<=1;l++)o.save(),a.attributes.x=new U(this.document,"x",c*s.width),a.attributes.y=new U(this.document,"y",l*s.height),a.render(o),o.restore();return t.createPattern(s,"repeat")}}class Ct extends st{constructor(){super(...arguments),this.type="marker"}render(t,e,r){if(e){var{x:i,y:n}=e,a=this.getAttribute("orient").getString("auto"),s=this.getAttribute("markerUnits").getString("strokeWidth");t.translate(i,n),"auto"===a&&t.rotate(r),"strokeWidth"===s&&t.scale(t.lineWidth,t.lineWidth),t.save();var o=new bt(this.document,null);o.type=this.type,o.attributes.viewBox=new U(this.document,"viewBox",this.getAttribute("viewBox").getValue()),o.attributes.refX=new U(this.document,"refX",this.getAttribute("refX").getValue()),o.attributes.refY=new U(this.document,"refY",this.getAttribute("refY").getValue()),o.attributes.width=new U(this.document,"width",this.getAttribute("markerWidth").getValue()),o.attributes.height=new U(this.document,"height",this.getAttribute("markerHeight").getValue()),o.attributes.overflow=new U(this.document,"overflow",this.getAttribute("overflow").getValue()),o.attributes.fill=new U(this.document,"fill",this.getAttribute("fill").getColor("black")),o.attributes.stroke=new U(this.document,"stroke",this.getAttribute("stroke").getValue("none")),o.children=this.children,o.render(t),t.restore(),"strokeWidth"===s&&t.scale(1/t.lineWidth,1/t.lineWidth),"auto"===a&&t.rotate(-r),t.translate(-i,-n)}}}class Mt extends st{constructor(){super(...arguments),this.type="defs"}render(){}}class Nt extends pt{constructor(){super(...arguments),this.type="g"}getBoundingBox(t){var e=new ft;return this.children.forEach(r=>{e.addBoundingBox(r.getBoundingBox(t))}),e}}class _t extends st{constructor(t,e,r){super(t,e,r),this.attributesToInherit=["gradientUnits"],this.stops=[];var{stops:i,children:n}=this;n.forEach(t=>{"stop"===t.type&&i.push(t)})}getGradientUnits(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}createGradient(t,e,r){var i=this;this.getHrefAttribute().hasValue()&&(i=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(i));var{stops:n}=i,a=this.getGradient(t,e);if(!a)return this.addParentOpacity(r,n[n.length-1].color);if(n.forEach(t=>{a.addColorStop(t.offset,this.addParentOpacity(r,t.color))}),this.getAttribute("gradientTransform").hasValue()){var{document:s}=this,{MAX_VIRTUAL_PIXELS:o,viewPort:u}=s.screen,[h]=u.viewPorts,c=new St(s,null);c.attributes.x=new U(s,"x",-o/3),c.attributes.y=new U(s,"y",-o/3),c.attributes.width=new U(s,"width",o),c.attributes.height=new U(s,"height",o);var l=new Nt(s,null);l.attributes.transform=new U(s,"transform",this.getAttribute("gradientTransform").getValue()),l.children=[c];var f=new bt(s,null);f.attributes.x=new U(s,"x",0),f.attributes.y=new U(s,"y",0),f.attributes.width=new U(s,"width",h.width),f.attributes.height=new U(s,"height",h.height),f.children=[l];var g=s.createCanvas(h.width,h.height),p=g.getContext("2d");return p.fillStyle=a,f.render(p),p.createPattern(g,"no-repeat")}return a}inheritStopContainer(t){this.attributesToInherit.forEach(e=>{!this.getAttribute(e).hasValue()&&t.getAttribute(e).hasValue()&&this.getAttribute(e,!0).setValue(t.getAttribute(e).getValue())})}addParentOpacity(t,e){return t.hasValue()?new U(this.document,"color",e).addOpacity(t).getColor():e}}class Vt extends _t{constructor(t,e,r){super(t,e,r),this.type="linearGradient",this.attributesToInherit.push("x1","y1","x2","y2")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=r?e.getBoundingBox(t):null;if(r&&!i)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var n=r?i.x+i.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),a=r?i.y+i.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),s=r?i.x+i.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),o=r?i.y+i.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return n===s&&a===o?null:t.createLinearGradient(n,a,s,o)}}class Rt extends _t{constructor(t,e,r){super(t,e,r),this.type="radialGradient",this.attributesToInherit.push("cx","cy","r","fx","fy","fr")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=e.getBoundingBox(t);if(r&&!i)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var n=r?i.x+i.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),a=r?i.y+i.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),s=n,o=a;this.getAttribute("fx").hasValue()&&(s=r?i.x+i.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(o=r?i.y+i.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var u=r?(i.width+i.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),h=this.getAttribute("fr").getPixels();return t.createRadialGradient(s,o,h,n,a,u)}}class kt extends st{constructor(t,e,r){super(t,e,r),this.type="stop";var i=Math.max(0,Math.min(1,this.getAttribute("offset").getNumber())),n=this.getStyle("stop-opacity"),a=this.getStyle("stop-color",!0);""===a.getString()&&a.setValue("#000"),n.hasValue()&&(a=a.addOpacity(n)),this.offset=i,this.color=a.getColor()}}class It extends st{constructor(t,e,r){super(t,e,r),this.type="animate",this.duration=0,this.initialValue=null,this.initialUnits="",this.removed=!1,this.frozen=!1,t.screen.animations.push(this),this.begin=this.getAttribute("begin").getMilliseconds(),this.maxDuration=this.begin+this.getAttribute("dur").getMilliseconds(),this.from=this.getAttribute("from"),this.to=this.getAttribute("to"),this.values=new U(t,"values",null);var i=this.getAttribute("values");i.hasValue()&&this.values.setValue(i.getString().split(";"))}getProperty(){var t=this.getAttribute("attributeType").getString(),e=this.getAttribute("attributeName").getString();return"CSS"===t?this.parent.getStyle(e,!0):this.parent.getAttribute(e,!0)}calcValue(){var{initialUnits:t}=this,{progress:e,from:r,to:i}=this.getProgress(),n=r.getNumber()+(i.getNumber()-r.getNumber())*e;return"%"===t&&(n*=100),"".concat(n).concat(t)}update(t){var{parent:e}=this,r=this.getProperty();if(this.initialValue||(this.initialValue=r.getString(),this.initialUnits=r.getUnits()),this.duration>this.maxDuration){var i=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==i||this.frozen){if("remove"===i&&!this.removed)return this.removed=!0,r.setValue(e.animationFrozen?e.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,e.animationFrozen=!0,e.animationFrozenValue=r.getString();return!1}this.duration+=t;var n=!1;if(this.begin<this.duration){var a=this.calcValue(),s=this.getAttribute("type");if(s.hasValue()){var o=s.getString();a="".concat(o,"(").concat(a,")")}r.setValue(a),n=!0}return n}getProgress(){var{document:t,values:e}=this,r={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(e.hasValue()){var i=r.progress*(e.getValue().length-1),n=Math.floor(i),a=Math.ceil(i);r.from=new U(t,"from",parseFloat(e.getValue()[n])),r.to=new U(t,"to",parseFloat(e.getValue()[a])),r.progress=(i-n)/(a-n)}else r.from=this.from,r.to=this.to;return r}}class Lt extends It{constructor(){super(...arguments),this.type="animateColor"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=new c.a(e.getColor()),n=new c.a(r.getColor());if(i.ok&&n.ok){var a=i.r+(n.r-i.r)*t,s=i.g+(n.g-i.g)*t,o=i.b+(n.b-i.b)*t;return"rgb(".concat(Math.floor(a),", ").concat(Math.floor(s),", ").concat(Math.floor(o),")")}return this.getAttribute("from").getColor()}}class Dt extends It{constructor(){super(...arguments),this.type="animateTransform"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=y(e.getString()),n=y(r.getString());return i.map((e,r)=>e+(n[r]-e)*t).join(" ")}}class Bt extends st{constructor(t,e,r){super(t,e,r),this.type="font",this.glyphs={},this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber();var{definitions:i}=t,{children:n}=this;for(var a of n)switch(a.type){case"font-face":this.fontFace=a;var s=a.getStyle("font-family");s.hasValue()&&(i[s.getString()]=this);break;case"missing-glyph":this.missingGlyph=a;break;case"glyph":var o=a;o.arabicForm?(this.isRTL=!0,this.isArabic=!0,void 0===this.glyphs[o.unicode]&&(this.glyphs[o.unicode]={}),this.glyphs[o.unicode][o.arabicForm]=o):this.glyphs[o.unicode]=o}}render(){}}class jt extends st{constructor(t,e,r){super(t,e,r),this.type="font-face",this.ascent=this.getAttribute("ascent").getNumber(),this.descent=this.getAttribute("descent").getNumber(),this.unitsPerEm=this.getAttribute("units-per-em").getNumber()}}class zt extends dt{constructor(){super(...arguments),this.type="missing-glyph",this.horizAdvX=0}}class Ft extends yt{constructor(){super(...arguments),this.type="tref"}getText(){var t=this.getHrefAttribute().getDefinition();if(t){var e=t.children[0];if(e)return e.getText()}return""}}class Ut extends yt{constructor(t,e,r){super(t,e,r),this.type="a";var{childNodes:i}=e,n=i[0],a=i.length>0&&Array.from(i).every(t=>3===t.nodeType);this.hasText=a,this.text=a?this.getTextFromNode(n):""}getText(){return this.text}renderChildren(t){if(this.hasText){super.renderChildren(t);var{document:e,x:r,y:i}=this,{mouse:n}=e.screen,a=new U(e,"fontSize",lt.parse(e.ctx.font).fontSize);n.isWorking()&&n.checkBoundingBox(this,new ft(r,i-a.getPixels("y"),r+this.measureText(t),i))}else if(this.children.length>0){var s=new Nt(this.document,null);s.children=this.children,s.parent=this,s.render(t)}}onClick(){var{window:t}=this.document;t&&t.open(this.getHrefAttribute().getString())}onMouseMove(){this.document.ctx.canvas.style.cursor="pointer"}}function Ht(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function Xt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ht(Object(r),!0).forEach((function(e){s()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ht(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}class Yt extends yt{constructor(t,e,r){super(t,e,r),this.type="textPath",this.textWidth=0,this.textHeight=0,this.pathLength=-1,this.glyphInfo=null,this.letterSpacingCache=[],this.measuresCache=new Map([["",0]]);var i=this.getHrefAttribute().getDefinition();this.text=this.getTextFromNode(),this.dataArray=this.parsePathData(i)}getText(){return this.text}path(t){var{dataArray:e}=this;t&&t.beginPath(),e.forEach(e=>{var{type:r,points:i}=e;switch(r){case gt.LINE_TO:t&&t.lineTo(i[0],i[1]);break;case gt.MOVE_TO:t&&t.moveTo(i[0],i[1]);break;case gt.CURVE_TO:t&&t.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case gt.QUAD_TO:t&&t.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case gt.ARC:var[n,a,s,o,u,h,c,l]=i,f=s>o?s:o,g=s>o?1:s/o,p=s>o?o/s:1;t&&(t.translate(n,a),t.rotate(c),t.scale(g,p),t.arc(0,0,f,u,u+h,Boolean(1-l)),t.scale(1/g,1/p),t.rotate(-c),t.translate(-n,-a));break;case gt.CLOSE_PATH:t&&t.closePath()}})}renderChildren(t){this.setTextData(t),t.save();var e=this.parent.getStyle("text-decoration").getString(),r=this.getFontSize(),{glyphInfo:i}=this,n=t.fillStyle;"underline"===e&&t.beginPath(),i.forEach((i,n)=>{var{p0:a,p1:s,rotation:o,text:u}=i;t.save(),t.translate(a.x,a.y),t.rotate(o),t.fillStyle&&t.fillText(u,0,0),t.strokeStyle&&t.strokeText(u,0,0),t.restore(),"underline"===e&&(0===n&&t.moveTo(a.x,a.y+r/8),t.lineTo(s.x,s.y+r/5))}),"underline"===e&&(t.lineWidth=r/20,t.strokeStyle=n,t.stroke(),t.closePath()),t.restore()}getLetterSpacingAt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[t]||0}findSegmentToFitChar(t,e,r,i,n,a,s,o,u){var h=a,c=this.measureText(t,o);" "===o&&"justify"===e&&r<i&&(c+=(i-r)/n),u>-1&&(h+=this.getLetterSpacingAt(u));var l=this.textHeight/20,f=this.getEquidistantPointOnPath(h,l,0),g=this.getEquidistantPointOnPath(h+c,l,0),p={p0:f,p1:g},d=f&&g?Math.atan2(g.y-f.y,g.x-f.x):0;if(s){var v=Math.cos(Math.PI/2+d)*s,y=Math.cos(-d)*s;p.p0=Xt(Xt({},f),{},{x:f.x+v,y:f.y+y}),p.p1=Xt(Xt({},g),{},{x:g.x+v,y:g.y+y})}return{offset:h+=c,segment:p,rotation:d}}measureText(t,e){var{measuresCache:r}=this,i=e||this.getText();if(r.has(i))return r.get(i);var n=this.measureTargetText(t,i);return r.set(i,n),n}setTextData(t){if(!this.glyphInfo){var e=this.getText(),r=e.split(""),i=e.split(" ").length-1,n=this.parent.getAttribute("dx").split().map(t=>t.getPixels("x")),a=this.parent.getAttribute("dy").getPixels("y"),s=this.parent.getStyle("text-anchor").getString("start"),o=this.getStyle("letter-spacing"),u=this.parent.getStyle("letter-spacing"),h=0;o.hasValue()&&"inherit"!==o.getValue()?o.hasValue()&&"initial"!==o.getValue()&&"unset"!==o.getValue()&&(h=o.getPixels()):h=u.getPixels();var c=[],l=e.length;this.letterSpacingCache=c;for(var f=0;f<l;f++)c.push(void 0!==n[f]?n[f]:h);var g=c.reduce((t,e,r)=>0===r?0:t+e||0,0),p=this.measureText(t),d=Math.max(p+g,0);this.textWidth=p,this.textHeight=this.getFontSize(),this.glyphInfo=[];var v=this.getPathLength(),y=this.getStyle("startOffset").getNumber(0)*v,m=0;"middle"!==s&&"center"!==s||(m=-d/2),"end"!==s&&"right"!==s||(m=-d),m+=y,r.forEach((e,n)=>{var{offset:o,segment:u,rotation:h}=this.findSegmentToFitChar(t,s,d,v,i,m,a,e,n);m=o,u.p0&&u.p1&&this.glyphInfo.push({text:r[n],p0:u.p0,p1:u.p1,rotation:h})})}}parsePathData(t){if(this.pathLength=-1,!t)return[];var e=[],{pathParser:r}=t;for(r.reset();!r.isEnd();){var{current:i}=r,n=i?i.x:0,a=i?i.y:0,s=r.next(),o=s.type,u=[];switch(s.type){case gt.MOVE_TO:this.pathM(r,u);break;case gt.LINE_TO:o=this.pathL(r,u);break;case gt.HORIZ_LINE_TO:o=this.pathH(r,u);break;case gt.VERT_LINE_TO:o=this.pathV(r,u);break;case gt.CURVE_TO:this.pathC(r,u);break;case gt.SMOOTH_CURVE_TO:o=this.pathS(r,u);break;case gt.QUAD_TO:this.pathQ(r,u);break;case gt.SMOOTH_QUAD_TO:o=this.pathT(r,u);break;case gt.ARC:u=this.pathA(r);break;case gt.CLOSE_PATH:dt.pathZ(r)}s.type!==gt.CLOSE_PATH?e.push({type:o,points:u,start:{x:n,y:a},pathLength:this.calcLength(n,a,o,u)}):e.push({type:gt.CLOSE_PATH,points:[],pathLength:0})}return e}pathM(t,e){var{x:r,y:i}=dt.pathM(t).point;e.push(r,i)}pathL(t,e){var{x:r,y:i}=dt.pathL(t).point;return e.push(r,i),gt.LINE_TO}pathH(t,e){var{x:r,y:i}=dt.pathH(t).point;return e.push(r,i),gt.LINE_TO}pathV(t,e){var{x:r,y:i}=dt.pathV(t).point;return e.push(r,i),gt.LINE_TO}pathC(t,e){var{point:r,controlPoint:i,currentPoint:n}=dt.pathC(t);e.push(r.x,r.y,i.x,i.y,n.x,n.y)}pathS(t,e){var{point:r,controlPoint:i,currentPoint:n}=dt.pathS(t);return e.push(r.x,r.y,i.x,i.y,n.x,n.y),gt.CURVE_TO}pathQ(t,e){var{controlPoint:r,currentPoint:i}=dt.pathQ(t);e.push(r.x,r.y,i.x,i.y)}pathT(t,e){var{controlPoint:r,currentPoint:i}=dt.pathT(t);return e.push(r.x,r.y,i.x,i.y),gt.QUAD_TO}pathA(t){var{rX:e,rY:r,sweepFlag:i,xAxisRotation:n,centp:a,a1:s,ad:o}=dt.pathA(t);return 0===i&&o>0&&(o-=2*Math.PI),1===i&&o<0&&(o+=2*Math.PI),[a.x,a.y,e,r,s,o,n,i]}calcLength(t,e,r,i){var n=0,a=null,s=null,o=0;switch(r){case gt.LINE_TO:return this.getLineLength(t,e,i[0],i[1]);case gt.CURVE_TO:for(n=0,a=this.getPointOnCubicBezier(0,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),o=.01;o<=1;o+=.01)s=this.getPointOnCubicBezier(o,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case gt.QUAD_TO:for(n=0,a=this.getPointOnQuadraticBezier(0,t,e,i[0],i[1],i[2],i[3]),o=.01;o<=1;o+=.01)s=this.getPointOnQuadraticBezier(o,t,e,i[0],i[1],i[2],i[3]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case gt.ARC:n=0;var u=i[4],h=i[5],c=i[4]+h,l=Math.PI/180;if(Math.abs(u-c)<l&&(l=Math.abs(u-c)),a=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],u,0),h<0)for(o=u-l;o>c;o-=l)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(o=u+l;o<c;o+=l)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],c,0),n+=this.getLineLength(a.x,a.y,s.x,s.y)}return 0}getPointOnLine(t,e,r,i,n){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r,o=(n-r)/(i-e+_),u=Math.sqrt(t*t/(1+o*o));i<e&&(u*=-1);var h=o*u,c=null;if(i===e)c={x:a,y:s+h};else if((s-r)/(a-e+_)===o)c={x:a+u,y:s+h};else{var l,f,g=this.getLineLength(e,r,i,n);if(g<_)return null;var p=(a-e)*(i-e)+(s-r)*(n-r);l=e+(p/=g*g)*(i-e),f=r+p*(n-r);var d=this.getLineLength(a,s,l,f),v=Math.sqrt(t*t-d*d);u=Math.sqrt(v*v/(1+o*o)),i<e&&(u*=-1),c={x:l+u,y:f+(h=o*u)}}return c}getPointOnPath(t){var e=this.getPathLength(),r=0,i=null;if(t<-5e-5||t-5e-5>e)return null;var{dataArray:n}=this;for(var a of n){if(!a||!(a.pathLength<5e-5||r+a.pathLength+5e-5<t)){var s=t-r,o=0;switch(a.type){case gt.LINE_TO:i=this.getPointOnLine(s,a.start.x,a.start.y,a.points[0],a.points[1],a.start.x,a.start.y);break;case gt.ARC:var u=a.points[4],h=a.points[5],c=a.points[4]+h;if(o=u+s/a.pathLength*h,h<0&&o<c||h>=0&&o>c)break;i=this.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case gt.CURVE_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case gt.QUAD_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}if(i)return i;break}r+=a.pathLength}return null}getLineLength(t,e,r,i){return Math.sqrt((r-t)*(r-t)+(i-e)*(i-e))}getPathLength(){return-1===this.pathLength&&(this.pathLength=this.dataArray.reduce((t,e)=>e.pathLength>0?t+e.pathLength:t,0)),this.pathLength}getPointOnCubicBezier(t,e,r,i,n,a,s,o,u){return{x:o*I(t)+a*L(t)+i*D(t)+e*B(t),y:u*I(t)+s*L(t)+n*D(t)+r*B(t)}}getPointOnQuadraticBezier(t,e,r,i,n,a,s){return{x:a*j(t)+i*z(t)+e*F(t),y:s*j(t)+n*z(t)+r*F(t)}}getPointOnEllipticalArc(t,e,r,i,n,a){var s=Math.cos(a),o=Math.sin(a),u=r*Math.cos(n),h=i*Math.sin(n);return{x:t+(u*s-h*o),y:e+(u*o+h*s)}}buildEquidistantCache(t,e){var r=this.getPathLength(),i=e||.25,n=t||r/100;if(!this.equidistantCache||this.equidistantCache.step!==n||this.equidistantCache.precision!==i){this.equidistantCache={step:n,precision:i,points:[]};for(var a=0,s=0;s<=r;s+=i){var o=this.getPointOnPath(s),u=this.getPointOnPath(s+i);o&&u&&((a+=this.getLineLength(o.x,o.y,u.x,u.y))>=n&&(this.equidistantCache.points.push({x:o.x,y:o.y,distance:s}),a-=n))}}}getEquidistantPointOnPath(t,e,r){if(this.buildEquidistantCache(e,r),t<0||t-this.getPathLength()>5e-5)return null;var i=Math.round(t/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[i]||null}}var Wt=/^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;class qt extends pt{constructor(t,e,r){super(t,e,r),this.type="image",this.loaded=!1;var i=this.getHrefAttribute().getString();if(i){var n=i.endsWith(".svg")||/^\s*data:image\/svg\+xml/i.test(i);t.images.push(this),n?this.loadSvg(i):this.loadImage(i),this.isSvg=n}}loadImage(t){var e=this;return n()((function*(){try{var r=yield e.document.createImage(t);e.image=r}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}loadSvg(t){var e=this;return n()((function*(){var r=Wt.exec(t);if(r){var i=r[5];"base64"===r[4]?e.image=atob(i):e.image=decodeURIComponent(i)}else try{var n=yield e.document.fetch(t),a=yield n.text();e.image=a}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}renderChildren(t){var{document:e,image:r,loaded:i}=this,n=this.getAttribute("x").getPixels("x"),a=this.getAttribute("y").getPixels("y"),s=this.getStyle("width").getPixels("x"),o=this.getStyle("height").getPixels("y");if(i&&r&&s&&o){if(t.save(),t.translate(n,a),this.isSvg){var u=e.canvg.forkString(t,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:0,offsetY:0,scaleWidth:s,scaleHeight:o});u.document.documentElement.parent=this,u.render()}else{var h=this.image;e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:s,desiredWidth:h.width,height:o,desiredHeight:h.height}),this.loaded&&(void 0===h.complete||h.complete)&&t.drawImage(h,0,0)}t.restore()}}getBoundingBox(){var t=this.getAttribute("x").getPixels("x"),e=this.getAttribute("y").getPixels("y"),r=this.getStyle("width").getPixels("x"),i=this.getStyle("height").getPixels("y");return new ft(t,e,t+r,e+i)}}class Gt extends pt{constructor(){super(...arguments),this.type="symbol"}render(t){}}class Qt{constructor(t){this.document=t,this.loaded=!1,t.fonts.push(this)}load(t,e){var r=this;return n()((function*(){try{var{document:i}=r,n=(yield i.canvg.parser.load(e)).getElementsByTagName("font");Array.from(n).forEach(e=>{var r=i.createElement(e);i.definitions[t]=r})}catch(t){console.error('Error while loading font "'.concat(e,'":'),t)}r.loaded=!0}))()}}class $t extends st{constructor(t,e,r){super(t,e,r),this.type="style",p(Array.from(e.childNodes).map(t=>t.textContent).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,"")).split("}").forEach(e=>{var r=e.trim();if(r){var i=r.split("{"),n=i[0].split(","),a=i[1].split(";");n.forEach(e=>{var r=e.trim();if(r){var i=t.styles[r]||{};if(a.forEach(e=>{var r=e.indexOf(":"),n=e.substr(0,r).trim(),a=e.substr(r+1,e.length-r).trim();n&&a&&(i[n]=new U(t,n,a))}),t.styles[r]=i,t.stylesSpecificity[r]=N(r),"@font-face"===r){var n=i["font-family"].getString().replace(/"|'/g,"");i.src.getString().split(",").forEach(e=>{if(e.indexOf('format("svg")')>0){var r=b(e);r&&new Qt(t).load(n,r)}})}}})}})}}$t.parseExternalUrl=b;class Zt extends pt{constructor(){super(...arguments),this.type="use"}setContext(t){super.setContext(t);var e=this.getAttribute("x"),r=this.getAttribute("y");e.hasValue()&&t.translate(e.getPixels("x"),0),r.hasValue()&&t.translate(0,r.getPixels("y"))}path(t){var{element:e}=this;e&&e.path(t)}renderChildren(t){var{document:e,element:r}=this;if(r){var i=r;if("symbol"===r.type&&((i=new bt(e,null)).attributes.viewBox=new U(e,"viewBox",r.getAttribute("viewBox").getString()),i.attributes.preserveAspectRatio=new U(e,"preserveAspectRatio",r.getAttribute("preserveAspectRatio").getString()),i.attributes.overflow=new U(e,"overflow",r.getAttribute("overflow").getString()),i.children=r.children,r.styles.opacity=new U(e,"opacity",this.calculateOpacity())),"svg"===i.type){var n=this.getStyle("width",!1,!0),a=this.getStyle("height",!1,!0);n.hasValue()&&(i.attributes.width=new U(e,"width",n.getString())),a.hasValue()&&(i.attributes.height=new U(e,"height",a.getString()))}var s=i.parent;i.parent=this,i.render(t),i.parent=s}}getBoundingBox(t){var{element:e}=this;return e?e.getBoundingBox(t):null}elementTransform(){var{document:t,element:e}=this;return at.fromElement(t,e)}get element(){return this.cachedElement||(this.cachedElement=this.getHrefAttribute().getDefinition()),this.cachedElement}}function Kt(t,e,r,i,n,a){return t[r*i*4+4*e+a]}function Jt(t,e,r,i,n,a,s){t[r*i*4+4*e+a]=s}function te(t,e,r){return t[e]*r}function ee(t,e,r,i){return e+Math.cos(t)*r+Math.sin(t)*i}class re extends st{constructor(t,e,r){super(t,e,r),this.type="feColorMatrix";var i=y(this.getAttribute("values").getString());switch(this.getAttribute("type").getString("matrix")){case"saturate":var n=i[0];i=[.213+.787*n,.715-.715*n,.072-.072*n,0,0,.213-.213*n,.715+.285*n,.072-.072*n,0,0,.213-.213*n,.715-.715*n,.072+.928*n,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var a=i[0]*Math.PI/180;i=[ee(a,.213,.787,-.213),ee(a,.715,-.715,-.715),ee(a,.072,-.072,.928),0,0,ee(a,.213,-.213,.143),ee(a,.715,.285,.14),ee(a,.072,-.072,-.283),0,0,ee(a,.213,-.213,-.787),ee(a,.715,-.715,.715),ee(a,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}this.matrix=i,this.includeOpacity=this.getAttribute("includeOpacity").hasValue()}apply(t,e,r,i,n){for(var{includeOpacity:a,matrix:s}=this,o=t.getImageData(0,0,i,n),u=0;u<n;u++)for(var h=0;h<i;h++){var c=Kt(o.data,h,u,i,0,0),l=Kt(o.data,h,u,i,0,1),f=Kt(o.data,h,u,i,0,2),g=Kt(o.data,h,u,i,0,3),p=te(s,0,c)+te(s,1,l)+te(s,2,f)+te(s,3,g)+te(s,4,1),d=te(s,5,c)+te(s,6,l)+te(s,7,f)+te(s,8,g)+te(s,9,1),v=te(s,10,c)+te(s,11,l)+te(s,12,f)+te(s,13,g)+te(s,14,1),y=te(s,15,c)+te(s,16,l)+te(s,17,f)+te(s,18,g)+te(s,19,1);a&&(p=0,d=0,v=0,y*=g/255),Jt(o.data,h,u,i,0,0,p),Jt(o.data,h,u,i,0,1,d),Jt(o.data,h,u,i,0,2,v),Jt(o.data,h,u,i,0,3,y)}t.clearRect(0,0,i,n),t.putImageData(o,0,0)}}class ie extends st{constructor(){super(...arguments),this.type="mask"}apply(t,e){var{document:r}=this,i=this.getAttribute("x").getPixels("x"),n=this.getAttribute("y").getPixels("y"),a=this.getStyle("width").getPixels("x"),s=this.getStyle("height").getPixels("y");if(!a&&!s){var o=new ft;this.children.forEach(e=>{o.addBoundingBox(e.getBoundingBox(t))}),i=Math.floor(o.x1),n=Math.floor(o.y1),a=Math.floor(o.width),s=Math.floor(o.height)}var u=this.removeStyles(e,ie.ignoreStyles),h=r.createCanvas(i+a,n+s),c=h.getContext("2d");r.screen.setDefaults(c),this.renderChildren(c),new re(r,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(c,0,0,i+a,n+s);var l=r.createCanvas(i+a,n+s),f=l.getContext("2d");r.screen.setDefaults(f),e.render(f),f.globalCompositeOperation="destination-in",f.fillStyle=c.createPattern(h,"no-repeat"),f.fillRect(0,0,i+a,n+s),t.fillStyle=f.createPattern(l,"no-repeat"),t.fillRect(0,0,i+a,n+s),this.restoreStyles(e,u)}render(t){}}ie.ignoreStyles=["mask","transform","clip-path"];var ne=()=>{};class ae extends st{constructor(){super(...arguments),this.type="clipPath"}apply(t){var{document:e}=this,r=Reflect.getPrototypeOf(t),{beginPath:i,closePath:n}=t;r&&(r.beginPath=ne,r.closePath=ne),Reflect.apply(i,t,[]),this.children.forEach(i=>{if(void 0!==i.path){var a=void 0!==i.elementTransform?i.elementTransform():null;a||(a=at.fromElement(e,i)),a&&a.apply(t),i.path(t),r&&(r.closePath=n),a&&a.unapply(t)}}),Reflect.apply(n,t,[]),t.clip(),r&&(r.beginPath=i,r.closePath=n)}render(t){}}class se extends st{constructor(){super(...arguments),this.type="filter"}apply(t,e){var{document:r,children:i}=this,n=e.getBoundingBox(t);if(n){var a=0,s=0;i.forEach(t=>{var e=t.extraFilterDistance||0;a=Math.max(a,e),s=Math.max(s,e)});var o=Math.floor(n.width),u=Math.floor(n.height),h=o+2*a,c=u+2*s;if(!(h<1||c<1)){var l=Math.floor(n.x),f=Math.floor(n.y),g=this.removeStyles(e,se.ignoreStyles),p=r.createCanvas(h,c),d=p.getContext("2d");r.screen.setDefaults(d),d.translate(-l+a,-f+s),e.render(d),i.forEach(t=>{"function"==typeof t.apply&&t.apply(d,0,0,h,c)}),t.drawImage(p,0,0,h,c,l-a,f-s,h,c),this.restoreStyles(e,g)}}}render(t){}}se.ignoreStyles=["filter","transform","clip-path"];class oe extends st{constructor(t,e,r){super(t,e,r),this.type="feDropShadow",this.addStylesFromStyleDefinition()}apply(t,e,r,i,n){}}class ue extends st{constructor(){super(...arguments),this.type="feMorphology"}apply(t,e,r,i,n){}}class he extends st{constructor(){super(...arguments),this.type="feComposite"}apply(t,e,r,i,n){}}class ce extends st{constructor(t,e,r){super(t,e,r),this.type="feGaussianBlur",this.blurRadius=Math.floor(this.getAttribute("stdDeviation").getNumber()),this.extraFilterDistance=this.blurRadius}apply(t,e,r,i,n){var{document:a,blurRadius:s}=this,o=a.window?a.window.document.body:null,u=t.canvas;u.id=a.getUniqueId(),o&&(u.style.display="none",o.appendChild(u)),Object(f.a)(u,e,r,i,n,s),o&&o.removeChild(u)}}class le extends st{constructor(){super(...arguments),this.type="title"}}class fe extends st{constructor(){super(...arguments),this.type="desc"}}var ge={svg:bt,rect:St,circle:wt,ellipse:At,line:Tt,polyline:Ot,polygon:Pt,path:dt,pattern:Et,marker:Ct,defs:Mt,linearGradient:Vt,radialGradient:Rt,stop:kt,animate:It,animateColor:Lt,animateTransform:Dt,font:Bt,"font-face":jt,"missing-glyph":zt,glyph:vt,text:yt,tspan:mt,tref:Ft,a:Ut,textPath:Yt,image:qt,g:Nt,symbol:Gt,style:$t,use:Zt,mask:ie,clipPath:ae,filter:se,feDropShadow:oe,feMorphology:ue,feComposite:he,feColorMatrix:re,feGaussianBlur:ce,title:le,desc:fe};function pe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function de(){return(de=n()((function*(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=document.createElement("img");return e&&(r.crossOrigin="Anonymous"),new Promise((e,i)=>{r.onload=()=>{e(r)},r.onerror=(t,e,r,n,a)=>{i(a)},r.src=t})}))).apply(this,arguments)}class ve{constructor(t){var{rootEmSize:e=12,emSize:r=12,createCanvas:i=ve.createCanvas,createImage:n=ve.createImage,anonymousCrossOrigin:a}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.canvg=t,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=t.screen,this.rootEmSize=e,this.emSize=r,this.createCanvas=i,this.createImage=this.bindCreateImage(n,a),this.screen.wait(this.isImagesLoaded.bind(this)),this.screen.wait(this.isFontsLoaded.bind(this))}bindCreateImage(t,e){return"boolean"==typeof e?(r,i)=>t(r,"boolean"==typeof i?i:e):t}get window(){return this.screen.window}get fetch(){return this.screen.fetch}get ctx(){return this.screen.ctx}get emSize(){var{emSizeStack:t}=this;return t[t.length-1]}set emSize(t){var{emSizeStack:e}=this;e.push(t)}popEmSize(){var{emSizeStack:t}=this;t.pop()}getUniqueId(){return"canvg".concat(++this.uniqueId)}isImagesLoaded(){return this.images.every(t=>t.loaded)}isFontsLoaded(){return this.fonts.every(t=>t.loaded)}createDocumentElement(t){var e=this.createElement(t.documentElement);return e.root=!0,e.addStylesFromStyleDefinition(),this.documentElement=e,e}createElement(t){var e=t.nodeName.replace(/^[^:]+:/,""),r=ve.elementTypes[e];return void 0!==r?new r(this,t):new ot(this,t)}createTextNode(t){return new xt(this,t)}setViewBox(t){this.screen.setViewBox(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?pe(Object(r),!0).forEach((function(e){s()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):pe(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({document:this},t))}}function ye(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function me(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ye(Object(r),!0).forEach((function(e){s()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ye(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}ve.createCanvas=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},ve.createImage=function(t){return de.apply(this,arguments)},ve.elementTypes=ge;class xe{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.parser=new Z(r),this.screen=new G(t,r),this.options=r;var i=new ve(this,r),n=i.createDocumentElement(e);this.document=i,this.documentElement=n}static from(t,e){var r=arguments;return n()((function*(){var i=r.length>2&&void 0!==r[2]?r[2]:{},n=new Z(i),a=yield n.parse(e);return new xe(t,a,i)}))()}static fromString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new Z(r).parseFromString(e);return new xe(t,i,r)}fork(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return xe.from(t,e,me(me({},this.options),r))}forkString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return xe.fromString(t,e,me(me({},this.options),r))}ready(){return this.screen.ready()}isReady(){return this.screen.isReady()}render(){var t=arguments,e=this;return n()((function*(){var r=t.length>0&&void 0!==t[0]?t[0]:{};e.start(me({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},r)),yield e.ready(),e.stop()}))()}start(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{documentElement:e,screen:r,options:i}=this;r.start(e,me(me({enableRedraw:!0},i),t))}stop(){this.screen.stop()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(t,e,r)}}e.default=xe}.call(this,r(89))},709:function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,r(37))},710:function(t,e){t.exports=function(t){return"function"==typeof t}},711:function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},712:function(t,e,r){var i=r(709),n=r(744),a=r(717),s=r(763),o=r(761),u=r(760),h=n("wks"),c=i.Symbol,l=u?c:c&&c.withoutSetter||s;t.exports=function(t){return a(h,t)&&(o||"string"==typeof h[t])||(o&&a(c,t)?h[t]=c[t]:h[t]=l("Symbol."+t)),h[t]}},713:function(t,e,r){var i=r(718);t.exports=function(t){if(i(t))return t;throw TypeError(String(t)+" is not an object")}},714:function(t,e,r){var i=r(709),n=r(729).f,a=r(727),s=r(722),o=r(746),u=r(789),h=r(767);t.exports=function(t,e){var r,c,l,f,g,p=t.target,d=t.global,v=t.stat;if(r=d?i:v?i[p]||o(p,{}):(i[p]||{}).prototype)for(c in e){if(f=e[c],l=t.noTargetGet?(g=n(r,c))&&g.value:r[c],!h(d?c:p+(v?".":"#")+c,t.forced)&&void 0!==l){if(typeof f==typeof l)continue;u(f,l)}(t.sham||l&&l.sham)&&a(f,"sham",!0),s(r,c,f,t)}}},715:function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},716:function(t,e,r){var i=r(751);t.exports=function(t){if("Symbol"===i(t))throw TypeError("Cannot convert a Symbol value to a string");return String(t)}},717:function(t,e,r){var i=r(733),n={}.hasOwnProperty;t.exports=Object.hasOwn||function(t,e){return n.call(i(t),e)}},718:function(t,e,r){var i=r(710);t.exports=function(t){return"object"==typeof t?null!==t:i(t)}},719:function(t,e,r){var i=r(738),n=Math.min;t.exports=function(t){return t>0?n(i(t),9007199254740991):0}},720:function(t,e,r){var i=r(711);t.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},721:function(t,e,r){var i=r(709),n=r(710),a=function(t){return n(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?a(i[t]):i[t]&&i[t][e]}},722:function(t,e,r){var i=r(709),n=r(710),a=r(717),s=r(727),o=r(746),u=r(735),h=r(736),c=r(737).CONFIGURABLE,l=h.get,f=h.enforce,g=String(String).split("String");(t.exports=function(t,e,r,u){var h,l=!!u&&!!u.unsafe,p=!!u&&!!u.enumerable,d=!!u&&!!u.noTargetGet,v=u&&void 0!==u.name?u.name:e;n(r)&&("Symbol("===String(v).slice(0,7)&&(v="["+String(v).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||c&&r.name!==v)&&s(r,"name",v),(h=f(r)).source||(h.source=g.join("string"==typeof v?v:""))),t!==i?(l?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=r:s(t,e,r)):p?t[e]=r:o(e,r)})(Function.prototype,"toString",(function(){return n(this)&&l(this).source||u(this)}))},723:function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},724:function(t,e,r){var i=r(725);t.exports=function(t,e){var r=t[e];return null==r?void 0:i(r)}},725:function(t,e,r){var i=r(710),n=r(762);t.exports=function(t){if(i(t))return t;throw TypeError(n(t)+" is not a function")}},726:function(t,e){t.exports=!1},727:function(t,e,r){var i=r(720),n=r(728),a=r(742);t.exports=i?function(t,e,r){return n.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},728:function(t,e,r){var i=r(720),n=r(764),a=r(713),s=r(758),o=Object.defineProperty;e.f=i?o:function(t,e,r){if(a(t),e=s(e),a(r),n)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},729:function(t,e,r){var i=r(720),n=r(785),a=r(742),s=r(731),o=r(758),u=r(717),h=r(764),c=Object.getOwnPropertyDescriptor;e.f=i?c:function(t,e){if(t=s(t),e=o(e),h)try{return c(t,e)}catch(t){}if(u(t,e))return a(!n.f.call(t,e),t[e])}},730:function(t,e){t.exports={}},731:function(t,e,r){var i=r(757),n=r(715);t.exports=function(t){return i(n(t))}},732:function(t,e,r){var i=r(721);t.exports=i("navigator","userAgent")||""},733:function(t,e,r){var i=r(715);t.exports=function(t){return Object(i(t))}},734:function(t,e,r){var i=r(709),n=r(718),a=i.document,s=n(a)&&n(a.createElement);t.exports=function(t){return s?a.createElement(t):{}}},735:function(t,e,r){var i=r(710),n=r(745),a=Function.toString;i(n.inspectSource)||(n.inspectSource=function(t){return a.call(t)}),t.exports=n.inspectSource},736:function(t,e,r){var i,n,a,s=r(788),o=r(709),u=r(718),h=r(727),c=r(717),l=r(745),f=r(747),g=r(748),p=o.WeakMap;if(s||l.state){var d=l.state||(l.state=new p),v=d.get,y=d.has,m=d.set;i=function(t,e){if(y.call(d,t))throw new TypeError("Object already initialized");return e.facade=t,m.call(d,t,e),e},n=function(t){return v.call(d,t)||{}},a=function(t){return y.call(d,t)}}else{var x=f("state");g[x]=!0,i=function(t,e){if(c(t,x))throw new TypeError("Object already initialized");return e.facade=t,h(t,x,e),e},n=function(t){return c(t,x)?t[x]:{}},a=function(t){return c(t,x)}}t.exports={set:i,get:n,has:a,enforce:function(t){return a(t)?n(t):i(t,{})},getterFor:function(t){return function(e){var r;if(!u(e)||(r=n(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},737:function(t,e,r){var i=r(720),n=r(717),a=Function.prototype,s=i&&Object.getOwnPropertyDescriptor,o=n(a,"name"),u=o&&"something"===function(){}.name,h=o&&(!i||i&&s(a,"name").configurable);t.exports={EXISTS:o,PROPER:u,CONFIGURABLE:h}},738:function(t,e){var r=Math.ceil,i=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?i:r)(t)}},739:function(t,e,r){var i=r(723),n=r(709);t.exports="process"==i(n.process)},740:function(t,e,r){"use strict";var i,n,a=r(716),s=r(776),o=r(777),u=r(744),h=r(741),c=r(736).get,l=r(819),f=r(820),g=RegExp.prototype.exec,p=u("native-string-replace",String.prototype.replace),d=g,v=(i=/a/,n=/b*/g,g.call(i,"a"),g.call(n,"a"),0!==i.lastIndex||0!==n.lastIndex),y=o.UNSUPPORTED_Y||o.BROKEN_CARET,m=void 0!==/()??/.exec("")[1];(v||m||y||l||f)&&(d=function(t){var e,r,i,n,o,u,l,f=this,x=c(f),b=a(t),S=x.raw;if(S)return S.lastIndex=f.lastIndex,e=d.call(S,b),f.lastIndex=S.lastIndex,e;var w=x.groups,A=y&&f.sticky,T=s.call(f),O=f.source,P=0,E=b;if(A&&(-1===(T=T.replace("y","")).indexOf("g")&&(T+="g"),E=b.slice(f.lastIndex),f.lastIndex>0&&(!f.multiline||f.multiline&&"\n"!==b.charAt(f.lastIndex-1))&&(O="(?: "+O+")",E=" "+E,P++),r=new RegExp("^(?:"+O+")",T)),m&&(r=new RegExp("^"+O+"$(?!\\s)",T)),v&&(i=f.lastIndex),n=g.call(A?r:f,E),A?n?(n.input=n.input.slice(P),n[0]=n[0].slice(P),n.index=f.lastIndex,f.lastIndex+=n[0].length):f.lastIndex=0:v&&n&&(f.lastIndex=f.global?n.index+n[0].length:i),m&&n&&n.length>1&&p.call(n[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n&&w)for(n.groups=u=h(null),o=0;o<w.length;o++)u[(l=w[o])[0]]=n[l[1]];return n}),t.exports=d},741:function(t,e,r){var i,n=r(713),a=r(817),s=r(749),o=r(748),u=r(773),h=r(734),c=r(747),l=c("IE_PROTO"),f=function(){},g=function(t){return"<script>"+t+"<\/script>"},p=function(t){t.write(g("")),t.close();var e=t.parentWindow.Object;return t=null,e},d=function(){try{i=new ActiveXObject("htmlfile")}catch(t){}var t,e;d="undefined"!=typeof document?document.domain&&i?p(i):((e=h("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(g("document.F=Object")),t.close(),t.F):p(i);for(var r=s.length;r--;)delete d.prototype[s[r]];return d()};o[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=n(t),r=new f,f.prototype=null,r[l]=t):r=d(),void 0===e?r:a(r,e)}},742:function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},743:function(t,e,r){var i,n,a=r(709),s=r(732),o=a.process,u=a.Deno,h=o&&o.versions||u&&u.version,c=h&&h.v8;c?n=(i=c.split("."))[0]<4?1:i[0]+i[1]:s&&(!(i=s.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=s.match(/Chrome\/(\d+)/))&&(n=i[1]),t.exports=n&&+n},744:function(t,e,r){var i=r(726),n=r(745);(t.exports=function(t,e){return n[t]||(n[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.18.1",mode:i?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},745:function(t,e,r){var i=r(709),n=r(746),a=i["__core-js_shared__"]||n("__core-js_shared__",{});t.exports=a},746:function(t,e,r){var i=r(709);t.exports=function(t,e){try{Object.defineProperty(i,t,{value:e,configurable:!0,writable:!0})}catch(r){i[t]=e}return e}},747:function(t,e,r){var i=r(744),n=r(763),a=i("keys");t.exports=function(t){return a[t]||(a[t]=n(t))}},748:function(t,e){t.exports={}},749:function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},750:function(t,e,r){var i=r(728).f,n=r(717),a=r(712)("toStringTag");t.exports=function(t,e,r){t&&!n(t=r?t:t.prototype,a)&&i(t,a,{configurable:!0,value:e})}},751:function(t,e,r){var i=r(802),n=r(710),a=r(723),s=r(712)("toStringTag"),o="Arguments"==a(function(){return arguments}());t.exports=i?a:function(t){var e,r,i;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),s))?r:o?a(e):"Object"==(i=a(e))&&n(e.callee)?"Arguments":i}},752:function(t,e,r){"use strict";r(816);var i=r(722),n=r(740),a=r(711),s=r(712),o=r(727),u=s("species"),h=RegExp.prototype;t.exports=function(t,e,r,c){var l=s(t),f=!a((function(){var e={};return e[l]=function(){return 7},7!=""[t](e)})),g=f&&!a((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[u]=function(){return r},r.flags="",r[l]=/./[l]),r.exec=function(){return e=!0,null},r[l](""),!e}));if(!f||!g||r){var p=/./[l],d=e(l,""[t],(function(t,e,r,i,a){var s=e.exec;return s===n||s===h.exec?f&&!a?{done:!0,value:p.call(e,r,i)}:{done:!0,value:t.call(r,e,i)}:{done:!1}}));i(String.prototype,t,d[0]),i(h,l,d[1])}c&&o(h[l],"sham",!0)}},753:function(t,e,r){"use strict";var i=r(821).charAt;t.exports=function(t,e,r){return e+(r?i(t,e).length:1)}},754:function(t,e,r){var i=r(713),n=r(710),a=r(723),s=r(740);t.exports=function(t,e){var r=t.exec;if(n(r)){var o=r.call(t,e);return null!==o&&i(o),o}if("RegExp"===a(t))return s.call(t,e);throw TypeError("RegExp#exec called on incompatible receiver")}},755:function(t,e,r){var i=r(778);t.exports=function(t){if(i(t))throw TypeError("The method doesn't accept regular expressions");return t}},756:function(t,e,r){var i=r(712)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[i]=!1,"/./"[t](e)}catch(t){}}return!1}},757:function(t,e,r){var i=r(711),n=r(723),a="".split;t.exports=i((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==n(t)?a.call(t,""):Object(t)}:Object},758:function(t,e,r){var i=r(786),n=r(759);t.exports=function(t){var e=i(t,"string");return n(e)?e:String(e)}},759:function(t,e,r){var i=r(710),n=r(721),a=r(760);t.exports=a?function(t){return"symbol"==typeof t}:function(t){var e=n("Symbol");return i(e)&&Object(t)instanceof e}},760:function(t,e,r){var i=r(761);t.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},761:function(t,e,r){var i=r(743),n=r(711);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},762:function(t,e){t.exports=function(t){try{return String(t)}catch(t){return"Object"}}},763:function(t,e){var r=0,i=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+i).toString(36)}},764:function(t,e,r){var i=r(720),n=r(711),a=r(734);t.exports=!i&&!n((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},765:function(t,e,r){var i=r(717),n=r(731),a=r(766).indexOf,s=r(748);t.exports=function(t,e){var r,o=n(t),u=0,h=[];for(r in o)!i(s,r)&&i(o,r)&&h.push(r);for(;e.length>u;)i(o,r=e[u++])&&(~a(h,r)||h.push(r));return h}},766:function(t,e,r){var i=r(731),n=r(719),a=r(792),s=function(t){return function(e,r,s){var o,u=i(e),h=n(u.length),c=a(s,h);if(t&&r!=r){for(;h>c;)if((o=u[c++])!=o)return!0}else for(;h>c;c++)if((t||c in u)&&u[c]===r)return t||c||0;return!t&&-1}};t.exports={includes:s(!0),indexOf:s(!1)}},767:function(t,e,r){var i=r(711),n=r(710),a=/#|\.prototype\./,s=function(t,e){var r=u[o(t)];return r==c||r!=h&&(n(e)?i(e):!!e)},o=s.normalize=function(t){return String(t).replace(a,".").toLowerCase()},u=s.data={},h=s.NATIVE="N",c=s.POLYFILL="P";t.exports=s},768:function(t,e,r){var i=r(713),n=r(796);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,a){return i(r),n(a),e?t.call(r,a):r.__proto__=a,r}}():void 0)},769:function(t,e,r){var i=r(725);t.exports=function(t,e,r){if(i(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,i){return t.call(e,r,i)};case 3:return function(r,i,n){return t.call(e,r,i,n)}}return function(){return t.apply(e,arguments)}}},770:function(t,e,r){var i=r(751),n=r(724),a=r(730),s=r(712)("iterator");t.exports=function(t){if(null!=t)return n(t,s)||n(t,"@@iterator")||a[i(t)]}},771:function(t,e,r){var i=r(713),n=r(805),a=r(712)("species");t.exports=function(t,e){var r,s=i(t).constructor;return void 0===s||null==(r=i(s)[a])?e:n(r)}},772:function(t,e,r){var i,n,a,s,o=r(709),u=r(710),h=r(711),c=r(769),l=r(773),f=r(734),g=r(774),p=r(739),d=o.setImmediate,v=o.clearImmediate,y=o.process,m=o.MessageChannel,x=o.Dispatch,b=0,S={};try{i=o.location}catch(t){}var w=function(t){if(S.hasOwnProperty(t)){var e=S[t];delete S[t],e()}},A=function(t){return function(){w(t)}},T=function(t){w(t.data)},O=function(t){o.postMessage(String(t),i.protocol+"//"+i.host)};d&&v||(d=function(t){for(var e=[],r=arguments.length,i=1;r>i;)e.push(arguments[i++]);return S[++b]=function(){(u(t)?t:Function(t)).apply(void 0,e)},n(b),b},v=function(t){delete S[t]},p?n=function(t){y.nextTick(A(t))}:x&&x.now?n=function(t){x.now(A(t))}:m&&!g?(s=(a=new m).port2,a.port1.onmessage=T,n=c(s.postMessage,s,1)):o.addEventListener&&u(o.postMessage)&&!o.importScripts&&i&&"file:"!==i.protocol&&!h(O)?(n=O,o.addEventListener("message",T,!1)):n="onreadystatechange"in f("script")?function(t){l.appendChild(f("script")).onreadystatechange=function(){l.removeChild(this),w(t)}}:function(t){setTimeout(A(t),0)}),t.exports={set:d,clear:v}},773:function(t,e,r){var i=r(721);t.exports=i("document","documentElement")},774:function(t,e,r){var i=r(732);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(i)},775:function(t,e,r){"use strict";var i=r(725),n=function(t){var e,r;this.promise=new t((function(t,i){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=i})),this.resolve=i(e),this.reject=i(r)};t.exports.f=function(t){return new n(t)}},776:function(t,e,r){"use strict";var i=r(713);t.exports=function(){var t=i(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},777:function(t,e,r){var i=r(711),n=r(709).RegExp;e.UNSUPPORTED_Y=i((function(){var t=n("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=i((function(){var t=n("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},778:function(t,e,r){var i=r(718),n=r(723),a=r(712)("match");t.exports=function(t){var e;return i(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==n(t))}},779:function(t,e,r){"use strict";var i=r(731),n=r(825),a=r(730),s=r(736),o=r(826),u=s.set,h=s.getterFor("Array Iterator");t.exports=o(Array,"Array",(function(t,e){u(this,{type:"Array Iterator",target:i(t),index:0,kind:e})}),(function(){var t=h(this),e=t.target,r=t.kind,i=t.index++;return!e||i>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:i,done:!1}:"values"==r?{value:e[i],done:!1}:{value:[i,e[i]],done:!1}}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},780:function(t,e,r){"use strict";var i,n,a,s=r(711),o=r(710),u=r(741),h=r(781),c=r(722),l=r(712),f=r(726),g=l("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(n=h(h(a)))!==Object.prototype&&(i=n):p=!0),null==i||s((function(){var t={};return i[g].call(t)!==t}))?i={}:f&&(i=u(i)),o(i[g])||c(i,g,(function(){return this})),t.exports={IteratorPrototype:i,BUGGY_SAFARI_ITERATORS:p}},781:function(t,e,r){var i=r(717),n=r(710),a=r(733),s=r(747),o=r(828),u=s("IE_PROTO"),h=Object.prototype;t.exports=o?Object.getPrototypeOf:function(t){var e=a(t);if(i(e,u))return e[u];var r=e.constructor;return n(r)&&e instanceof r?r.prototype:e instanceof Object?h:null}},782:function(t,e,r){"use strict";var i=r(711);t.exports=function(t,e){var r=[][t];return!!r&&i((function(){r.call(null,e||function(){throw 1},1)}))}},783:function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},784:function(t,e,r){"use strict";var i,n,a,s,o=r(714),u=r(726),h=r(709),c=r(721),l=r(794),f=r(722),g=r(795),p=r(768),d=r(750),v=r(797),y=r(725),m=r(710),x=r(718),b=r(798),S=r(735),w=r(799),A=r(804),T=r(771),O=r(772).set,P=r(807),E=r(810),C=r(811),M=r(775),N=r(812),_=r(736),V=r(767),R=r(712),k=r(813),I=r(739),L=r(743),D=R("species"),B="Promise",j=_.get,z=_.set,F=_.getterFor(B),U=l&&l.prototype,H=l,X=U,Y=h.TypeError,W=h.document,q=h.process,G=M.f,Q=G,$=!!(W&&W.createEvent&&h.dispatchEvent),Z=m(h.PromiseRejectionEvent),K=!1,J=V(B,(function(){var t=S(H),e=t!==String(H);if(!e&&66===L)return!0;if(u&&!X.finally)return!0;if(L>=51&&/native code/.test(t))return!1;var r=new H((function(t){t(1)})),i=function(t){t((function(){}),(function(){}))};return(r.constructor={})[D]=i,!(K=r.then((function(){}))instanceof i)||!e&&k&&!Z})),tt=J||!A((function(t){H.all(t).catch((function(){}))})),et=function(t){var e;return!(!x(t)||!m(e=t.then))&&e},rt=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;P((function(){for(var i=t.value,n=1==t.state,a=0;r.length>a;){var s,o,u,h=r[a++],c=n?h.ok:h.fail,l=h.resolve,f=h.reject,g=h.domain;try{c?(n||(2===t.rejection&&st(t),t.rejection=1),!0===c?s=i:(g&&g.enter(),s=c(i),g&&(g.exit(),u=!0)),s===h.promise?f(Y("Promise-chain cycle")):(o=et(s))?o.call(s,l,f):l(s)):f(i)}catch(t){g&&!u&&g.exit(),f(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&nt(t)}))}},it=function(t,e,r){var i,n;$?((i=W.createEvent("Event")).promise=e,i.reason=r,i.initEvent(t,!1,!0),h.dispatchEvent(i)):i={promise:e,reason:r},!Z&&(n=h["on"+t])?n(i):"unhandledrejection"===t&&C("Unhandled promise rejection",r)},nt=function(t){O.call(h,(function(){var e,r=t.facade,i=t.value;if(at(t)&&(e=N((function(){I?q.emit("unhandledRejection",i,r):it("unhandledrejection",r,i)})),t.rejection=I||at(t)?2:1,e.error))throw e.value}))},at=function(t){return 1!==t.rejection&&!t.parent},st=function(t){O.call(h,(function(){var e=t.facade;I?q.emit("rejectionHandled",e):it("rejectionhandled",e,t.value)}))},ot=function(t,e,r){return function(i){t(e,i,r)}},ut=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,rt(t,!0))},ht=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw Y("Promise can't be resolved itself");var i=et(e);i?P((function(){var r={done:!1};try{i.call(e,ot(ht,r,t),ot(ut,r,t))}catch(e){ut(r,e,t)}})):(t.value=e,t.state=1,rt(t,!1))}catch(e){ut({done:!1},e,t)}}};if(J&&(X=(H=function(t){b(this,H,B),y(t),i.call(this);var e=j(this);try{t(ot(ht,e),ot(ut,e))}catch(t){ut(e,t)}}).prototype,(i=function(t){z(this,{type:B,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=g(X,{then:function(t,e){var r=F(this),i=G(T(this,H));return i.ok=!m(t)||t,i.fail=m(e)&&e,i.domain=I?q.domain:void 0,r.parent=!0,r.reactions.push(i),0!=r.state&&rt(r,!1),i.promise},catch:function(t){return this.then(void 0,t)}}),n=function(){var t=new i,e=j(t);this.promise=t,this.resolve=ot(ht,e),this.reject=ot(ut,e)},M.f=G=function(t){return t===H||t===a?new n(t):Q(t)},!u&&m(l)&&U!==Object.prototype)){s=U.then,K||(f(U,"then",(function(t,e){var r=this;return new H((function(t,e){s.call(r,t,e)})).then(t,e)}),{unsafe:!0}),f(U,"catch",X.catch,{unsafe:!0}));try{delete U.constructor}catch(t){}p&&p(U,X)}o({global:!0,wrap:!0,forced:J},{Promise:H}),d(H,B,!1,!0),v(B),a=c(B),o({target:B,stat:!0,forced:J},{reject:function(t){var e=G(this);return e.reject.call(void 0,t),e.promise}}),o({target:B,stat:!0,forced:u||J},{resolve:function(t){return E(u&&this===a?H:this,t)}}),o({target:B,stat:!0,forced:tt},{all:function(t){var e=this,r=G(e),i=r.resolve,n=r.reject,a=N((function(){var r=y(e.resolve),a=[],s=0,o=1;w(t,(function(t){var u=s++,h=!1;a.push(void 0),o++,r.call(e,t).then((function(t){h||(h=!0,a[u]=t,--o||i(a))}),n)})),--o||i(a)}));return a.error&&n(a.value),r.promise},race:function(t){var e=this,r=G(e),i=r.reject,n=N((function(){var n=y(e.resolve);w(t,(function(t){n.call(e,t).then(r.resolve,i)}))}));return n.error&&i(n.value),r.promise}})},785:function(t,e,r){"use strict";var i={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,a=n&&!i.call({1:2},1);e.f=a?function(t){var e=n(this,t);return!!e&&e.enumerable}:i},786:function(t,e,r){var i=r(718),n=r(759),a=r(724),s=r(787),o=r(712)("toPrimitive");t.exports=function(t,e){if(!i(t)||n(t))return t;var r,u=a(t,o);if(u){if(void 0===e&&(e="default"),r=u.call(t,e),!i(r)||n(r))return r;throw TypeError("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(t,e)}},787:function(t,e,r){var i=r(710),n=r(718);t.exports=function(t,e){var r,a;if("string"===e&&i(r=t.toString)&&!n(a=r.call(t)))return a;if(i(r=t.valueOf)&&!n(a=r.call(t)))return a;if("string"!==e&&i(r=t.toString)&&!n(a=r.call(t)))return a;throw TypeError("Can't convert object to primitive value")}},788:function(t,e,r){var i=r(709),n=r(710),a=r(735),s=i.WeakMap;t.exports=n(s)&&/native code/.test(a(s))},789:function(t,e,r){var i=r(717),n=r(790),a=r(729),s=r(728);t.exports=function(t,e){for(var r=n(e),o=s.f,u=a.f,h=0;h<r.length;h++){var c=r[h];i(t,c)||o(t,c,u(e,c))}}},790:function(t,e,r){var i=r(721),n=r(791),a=r(793),s=r(713);t.exports=i("Reflect","ownKeys")||function(t){var e=n.f(s(t)),r=a.f;return r?e.concat(r(t)):e}},791:function(t,e,r){var i=r(765),n=r(749).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,n)}},792:function(t,e,r){var i=r(738),n=Math.max,a=Math.min;t.exports=function(t,e){var r=i(t);return r<0?n(r+e,0):a(r,e)}},793:function(t,e){e.f=Object.getOwnPropertySymbols},794:function(t,e,r){var i=r(709);t.exports=i.Promise},795:function(t,e,r){var i=r(722);t.exports=function(t,e,r){for(var n in e)i(t,n,e[n],r);return t}},796:function(t,e,r){var i=r(710);t.exports=function(t){if("object"==typeof t||i(t))return t;throw TypeError("Can't set "+String(t)+" as a prototype")}},797:function(t,e,r){"use strict";var i=r(721),n=r(728),a=r(712),s=r(720),o=a("species");t.exports=function(t){var e=i(t),r=n.f;s&&e&&!e[o]&&r(e,o,{configurable:!0,get:function(){return this}})}},798:function(t,e){t.exports=function(t,e,r){if(t instanceof e)return t;throw TypeError("Incorrect "+(r?r+" ":"")+"invocation")}},799:function(t,e,r){var i=r(713),n=r(800),a=r(719),s=r(769),o=r(801),u=r(770),h=r(803),c=function(t,e){this.stopped=t,this.result=e};t.exports=function(t,e,r){var l,f,g,p,d,v,y,m=r&&r.that,x=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),S=!(!r||!r.INTERRUPTED),w=s(e,m,1+x+S),A=function(t){return l&&h(l,"normal",t),new c(!0,t)},T=function(t){return x?(i(t),S?w(t[0],t[1],A):w(t[0],t[1])):S?w(t,A):w(t)};if(b)l=t;else{if(!(f=u(t)))throw TypeError(String(t)+" is not iterable");if(n(f)){for(g=0,p=a(t.length);p>g;g++)if((d=T(t[g]))&&d instanceof c)return d;return new c(!1)}l=o(t,f)}for(v=l.next;!(y=v.call(l)).done;){try{d=T(y.value)}catch(t){h(l,"throw",t)}if("object"==typeof d&&d&&d instanceof c)return d}return new c(!1)}},800:function(t,e,r){var i=r(712),n=r(730),a=i("iterator"),s=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||s[a]===t)}},801:function(t,e,r){var i=r(725),n=r(713),a=r(770);t.exports=function(t,e){var r=arguments.length<2?a(t):e;if(i(r))return n(r.call(t));throw TypeError(String(t)+" is not iterable")}},802:function(t,e,r){var i={};i[r(712)("toStringTag")]="z",t.exports="[object z]"===String(i)},803:function(t,e,r){var i=r(713),n=r(724);t.exports=function(t,e,r){var a,s;i(t);try{if(!(a=n(t,"return"))){if("throw"===e)throw r;return r}a=a.call(t)}catch(t){s=!0,a=t}if("throw"===e)throw r;if(s)throw a;return i(a),r}},804:function(t,e,r){var i=r(712)("iterator"),n=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){n=!0}};s[i]=function(){return this},Array.from(s,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!n)return!1;var r=!1;try{var a={};a[i]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},805:function(t,e,r){var i=r(806),n=r(762);t.exports=function(t){if(i(t))return t;throw TypeError(n(t)+" is not a constructor")}},806:function(t,e,r){var i=r(711),n=r(710),a=r(751),s=r(721),o=r(735),u=[],h=s("Reflect","construct"),c=/^\s*(?:class|function)\b/,l=c.exec,f=!c.exec((function(){})),g=function(t){if(!n(t))return!1;try{return h(Object,u,t),!0}catch(t){return!1}};t.exports=!h||i((function(){var t;return g(g.call)||!g(Object)||!g((function(){t=!0}))||t}))?function(t){if(!n(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return f||!!l.call(c,o(t))}:g},807:function(t,e,r){var i,n,a,s,o,u,h,c,l=r(709),f=r(729).f,g=r(772).set,p=r(774),d=r(808),v=r(809),y=r(739),m=l.MutationObserver||l.WebKitMutationObserver,x=l.document,b=l.process,S=l.Promise,w=f(l,"queueMicrotask"),A=w&&w.value;A||(i=function(){var t,e;for(y&&(t=b.domain)&&t.exit();n;){e=n.fn,n=n.next;try{e()}catch(t){throw n?s():a=void 0,t}}a=void 0,t&&t.enter()},p||y||v||!m||!x?!d&&S&&S.resolve?((h=S.resolve(void 0)).constructor=S,c=h.then,s=function(){c.call(h,i)}):s=y?function(){b.nextTick(i)}:function(){g.call(l,i)}:(o=!0,u=x.createTextNode(""),new m(i).observe(u,{characterData:!0}),s=function(){u.data=o=!o})),t.exports=A||function(t){var e={fn:t,next:void 0};a&&(a.next=e),n||(n=e,s()),a=e}},808:function(t,e,r){var i=r(732),n=r(709);t.exports=/ipad|iphone|ipod/i.test(i)&&void 0!==n.Pebble},809:function(t,e,r){var i=r(732);t.exports=/web0s(?!.*chrome)/i.test(i)},810:function(t,e,r){var i=r(713),n=r(718),a=r(775);t.exports=function(t,e){if(i(t),n(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},811:function(t,e,r){var i=r(709);t.exports=function(t,e){var r=i.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},812:function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},813:function(t,e){t.exports="object"==typeof window},814:function(t,e){function r(t,e,r,i,n,a,s){try{var o=t[a](s),u=o.value}catch(t){return void r(t)}o.done?e(u):Promise.resolve(u).then(i,n)}t.exports=function(t){return function(){var e=this,i=arguments;return new Promise((function(n,a){var s=t.apply(e,i);function o(t){r(s,n,a,o,u,"next",t)}function u(t){r(s,n,a,o,u,"throw",t)}o(void 0)}))}},t.exports.default=t.exports,t.exports.__esModule=!0},815:function(t,e,r){"use strict";var i=r(752),n=r(713),a=r(719),s=r(716),o=r(715),u=r(724),h=r(753),c=r(754);i("match",(function(t,e,r){return[function(e){var r=o(this),i=null==e?void 0:u(e,t);return i?i.call(e,r):new RegExp(e)[t](s(r))},function(t){var i=n(this),o=s(t),u=r(e,i,o);if(u.done)return u.value;if(!i.global)return c(i,o);var l=i.unicode;i.lastIndex=0;for(var f,g=[],p=0;null!==(f=c(i,o));){var d=s(f[0]);g[p]=d,""===d&&(i.lastIndex=h(o,a(i.lastIndex),l)),p++}return 0===p?null:g}]}))},816:function(t,e,r){"use strict";var i=r(714),n=r(740);i({target:"RegExp",proto:!0,forced:/./.exec!==n},{exec:n})},817:function(t,e,r){var i=r(720),n=r(728),a=r(713),s=r(818);t.exports=i?Object.defineProperties:function(t,e){a(t);for(var r,i=s(e),o=i.length,u=0;o>u;)n.f(t,r=i[u++],e[r]);return t}},818:function(t,e,r){var i=r(765),n=r(749);t.exports=Object.keys||function(t){return i(t,n)}},819:function(t,e,r){var i=r(711),n=r(709).RegExp;t.exports=i((function(){var t=n(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},820:function(t,e,r){var i=r(711),n=r(709).RegExp;t.exports=i((function(){var t=n("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},821:function(t,e,r){var i=r(738),n=r(716),a=r(715),s=function(t){return function(e,r){var s,o,u=n(a(e)),h=i(r),c=u.length;return h<0||h>=c?t?"":void 0:(s=u.charCodeAt(h))<55296||s>56319||h+1===c||(o=u.charCodeAt(h+1))<56320||o>57343?t?u.charAt(h):s:t?u.slice(h,h+2):o-56320+(s-55296<<10)+65536}};t.exports={codeAt:s(!1),charAt:s(!0)}},822:function(t,e,r){"use strict";var i=r(752),n=r(711),a=r(713),s=r(710),o=r(738),u=r(719),h=r(716),c=r(715),l=r(753),f=r(724),g=r(823),p=r(754),d=r(712)("replace"),v=Math.max,y=Math.min,m="$0"==="a".replace(/./,"$0"),x=!!/./[d]&&""===/./[d]("a","$0");i("replace",(function(t,e,r){var i=x?"$":"$0";return[function(t,r){var i=c(this),n=null==t?void 0:f(t,d);return n?n.call(t,i,r):e.call(h(i),t,r)},function(t,n){var c=a(this),f=h(t);if("string"==typeof n&&-1===n.indexOf(i)&&-1===n.indexOf("$<")){var d=r(e,c,f,n);if(d.done)return d.value}var m=s(n);m||(n=h(n));var x=c.global;if(x){var b=c.unicode;c.lastIndex=0}for(var S=[];;){var w=p(c,f);if(null===w)break;if(S.push(w),!x)break;""===h(w[0])&&(c.lastIndex=l(f,u(c.lastIndex),b))}for(var A,T="",O=0,P=0;P<S.length;P++){w=S[P];for(var E=h(w[0]),C=v(y(o(w.index),f.length),0),M=[],N=1;N<w.length;N++)M.push(void 0===(A=w[N])?A:String(A));var _=w.groups;if(m){var V=[E].concat(M,C,f);void 0!==_&&V.push(_);var R=h(n.apply(void 0,V))}else R=g(E,f,C,M,_,n);C>=O&&(T+=f.slice(O,C)+R,O=C+E.length)}return T+f.slice(O)}]}),!!n((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!m||x)},823:function(t,e,r){var i=r(733),n=Math.floor,a="".replace,s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,o=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,u,h,c){var l=r+t.length,f=u.length,g=o;return void 0!==h&&(h=i(h),g=s),a.call(c,g,(function(i,a){var s;switch(a.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(l);case"<":s=h[a.slice(1,-1)];break;default:var o=+a;if(0===o)return i;if(o>f){var c=n(o/10);return 0===c?i:c<=f?void 0===u[c-1]?a.charAt(1):u[c-1]+a.charAt(1):i}s=u[o-1]}return void 0===s?"":s}))}},824:function(t,e,r){"use strict";var i,n=r(714),a=r(729).f,s=r(719),o=r(716),u=r(755),h=r(715),c=r(756),l=r(726),f="".startsWith,g=Math.min,p=c("startsWith");n({target:"String",proto:!0,forced:!!(l||p||(i=a(String.prototype,"startsWith"),!i||i.writable))&&!p},{startsWith:function(t){var e=o(h(this));u(t);var r=s(g(arguments.length>1?arguments[1]:void 0,e.length)),i=o(t);return f?f.call(e,i,r):e.slice(r,r+i.length)===i}})},825:function(t,e,r){var i=r(712),n=r(741),a=r(728),s=i("unscopables"),o=Array.prototype;null==o[s]&&a.f(o,s,{configurable:!0,value:n(null)}),t.exports=function(t){o[s][t]=!0}},826:function(t,e,r){"use strict";var i=r(714),n=r(726),a=r(737),s=r(710),o=r(827),u=r(781),h=r(768),c=r(750),l=r(727),f=r(722),g=r(712),p=r(730),d=r(780),v=a.PROPER,y=a.CONFIGURABLE,m=d.IteratorPrototype,x=d.BUGGY_SAFARI_ITERATORS,b=g("iterator"),S=function(){return this};t.exports=function(t,e,r,a,g,d,w){o(r,e,a);var A,T,O,P=function(t){if(t===g&&_)return _;if(!x&&t in M)return M[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},E=e+" Iterator",C=!1,M=t.prototype,N=M[b]||M["@@iterator"]||g&&M[g],_=!x&&N||P(g),V="Array"==e&&M.entries||N;if(V&&(A=u(V.call(new t)))!==Object.prototype&&A.next&&(n||u(A)===m||(h?h(A,m):s(A[b])||f(A,b,S)),c(A,E,!0,!0),n&&(p[E]=S)),v&&"values"==g&&N&&"values"!==N.name&&(!n&&y?l(M,"name","values"):(C=!0,_=function(){return N.call(this)})),g)if(T={values:P("values"),keys:d?_:P("keys"),entries:P("entries")},w)for(O in T)(x||C||!(O in M))&&f(M,O,T[O]);else i({target:e,proto:!0,forced:x||C},T);return n&&!w||M[b]===_||f(M,b,_,{name:g}),p[e]=_,T}},827:function(t,e,r){"use strict";var i=r(780).IteratorPrototype,n=r(741),a=r(742),s=r(750),o=r(730),u=function(){return this};t.exports=function(t,e,r){var h=e+" Iterator";return t.prototype=n(i,{next:a(1,r)}),s(t,h,!1,!0),o[h]=u,t}},828:function(t,e,r){var i=r(711);t.exports=!i((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},829:function(t,e,r){var i=r(709),n=r(830),a=r(831),s=r(779),o=r(727),u=r(712),h=u("iterator"),c=u("toStringTag"),l=s.values,f=function(t,e){if(t){if(t[h]!==l)try{o(t,h,l)}catch(e){t[h]=l}if(t[c]||o(t,c,e),n[e])for(var r in s)if(t[r]!==s[r])try{o(t,r,s[r])}catch(e){t[r]=s[r]}}};for(var g in n)f(i[g]&&i[g].prototype,g);f(a,"DOMTokenList")},830:function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},831:function(t,e,r){var i=r(734)("span").classList,n=i&&i.constructor&&i.constructor.prototype;t.exports=n===Object.prototype?void 0:n},832:function(t,e,r){"use strict";var i=r(714),n=r(833).left,a=r(782),s=r(743),o=r(739);i({target:"Array",proto:!0,forced:!a("reduce")||!o&&s>79&&s<83},{reduce:function(t){return n(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},833:function(t,e,r){var i=r(725),n=r(733),a=r(757),s=r(719),o=function(t){return function(e,r,o,u){i(r);var h=n(e),c=a(h),l=s(h.length),f=t?l-1:0,g=t?-1:1;if(o<2)for(;;){if(f in c){u=c[f],f+=g;break}if(f+=g,t?f<0:l<=f)throw TypeError("Reduce of empty array with no initial value")}for(;t?f>=0:l>f;f+=g)f in c&&(u=r(u,c[f],f,h));return u}};t.exports={left:o(!1),right:o(!0)}},834:function(t,e,r){"use strict";var i,n=r(714),a=r(729).f,s=r(719),o=r(716),u=r(755),h=r(715),c=r(756),l=r(726),f="".endsWith,g=Math.min,p=c("endsWith");n({target:"String",proto:!0,forced:!!(l||p||(i=a(String.prototype,"endsWith"),!i||i.writable))&&!p},{endsWith:function(t){var e=o(h(this));u(t);var r=arguments.length>1?arguments[1]:void 0,i=s(e.length),n=void 0===r?i:g(s(r),i),a=o(t);return f?f.call(e,a,n):e.slice(n-a.length,n)===a}})},835:function(t,e,r){"use strict";var i=r(752),n=r(778),a=r(713),s=r(715),o=r(771),u=r(753),h=r(719),c=r(716),l=r(724),f=r(754),g=r(740),p=r(777),d=r(711),v=p.UNSUPPORTED_Y,y=[].push,m=Math.min;i("split",(function(t,e,r){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var i=c(s(this)),a=void 0===r?4294967295:r>>>0;if(0===a)return[];if(void 0===t)return[i];if(!n(t))return e.call(i,t,a);for(var o,u,h,l=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,d=new RegExp(t.source,f+"g");(o=g.call(d,i))&&!((u=d.lastIndex)>p&&(l.push(i.slice(p,o.index)),o.length>1&&o.index<i.length&&y.apply(l,o.slice(1)),h=o[0].length,p=u,l.length>=a));)d.lastIndex===o.index&&d.lastIndex++;return p===i.length?!h&&d.test("")||l.push(""):l.push(i.slice(p)),l.length>a?l.slice(0,a):l}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:e.call(this,t,r)}:e,[function(e,r){var n=s(this),a=null==e?void 0:l(e,t);return a?a.call(e,n,r):i.call(c(n),e,r)},function(t,n){var s=a(this),l=c(t),g=r(i,s,l,n,i!==e);if(g.done)return g.value;var p=o(s,RegExp),d=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(v?"g":"y"),x=new p(v?"^(?:"+s.source+")":s,y),b=void 0===n?4294967295:n>>>0;if(0===b)return[];if(0===l.length)return null===f(x,l)?[l]:[];for(var S=0,w=0,A=[];w<l.length;){x.lastIndex=v?0:w;var T,O=f(x,v?l.slice(w):l);if(null===O||(T=m(h(x.lastIndex+(v?w:0)),l.length))===S)w=u(l,w,d);else{if(A.push(l.slice(S,w)),A.length===b)return A;for(var P=1;P<=O.length-1;P++)if(A.push(O[P]),A.length===b)return A;w=S=T}}return A.push(l.slice(S)),A}]}),!!d((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),v)},836:function(t,e,r){"use strict";var i=r(714),n=r(837).trim;i({target:"String",proto:!0,forced:r(838)("trim")},{trim:function(){return n(this)}})},837:function(t,e,r){var i=r(715),n=r(716),a="["+r(783)+"]",s=RegExp("^"+a+a+"*"),o=RegExp(a+a+"*$"),u=function(t){return function(e){var r=n(i(e));return 1&t&&(r=r.replace(s,"")),2&t&&(r=r.replace(o,"")),r}};t.exports={start:u(1),end:u(2),trim:u(3)}},838:function(t,e,r){var i=r(737).PROPER,n=r(711),a=r(783);t.exports=function(t){return n((function(){return!!a[t]()||"​᠎"!=="​᠎"[t]()||i&&a[t].name!==t}))}},839:function(t,e){t.exports=function(t){this.ok=!1,this.alpha=1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var e={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};t=e[t]||t;for(var r=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],i=0;i<r.length;i++){var n=r[i].re,a=r[i].process,s=n.exec(t);if(s){var o=a(s);this.r=o[0],this.g=o[1],this.b=o[2],o.length>3&&(this.alpha=o[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},this.getHelpXML=function(){for(var t=new Array,i=0;i<r.length;i++)for(var n=r[i].example,a=0;a<n.length;a++)t[t.length]=n[a];for(var s in e)t[t.length]=s;var o=document.createElement("ul");o.setAttribute("id","rgbcolor-examples");for(i=0;i<t.length;i++)try{var u=document.createElement("li"),h=new RGBColor(t[i]),c=document.createElement("div");c.style.cssText="margin: 3px; border: 1px solid black; background:"+h.toHex()+"; color:"+h.toHex(),c.appendChild(document.createTextNode("test"));var l=document.createTextNode(" "+t[i]+" -> "+h.toRGB()+" -> "+h.toHex());u.appendChild(c),u.appendChild(l),o.appendChild(u)}catch(t){}return o}}},840:function(t,e,r){"use strict";var i=r(714),n=r(755),a=r(715),s=r(716);i({target:"String",proto:!0,forced:!r(756)("includes")},{includes:function(t){return!!~s(a(this)).indexOf(s(n(t)),arguments.length>1?arguments[1]:void 0)}})},841:function(t,e,r){"use strict";var i=r(714),n=r(766).indexOf,a=r(782),s=[].indexOf,o=!!s&&1/[1].indexOf(1,-0)<0,u=a("indexOf");i({target:"Array",proto:!0,forced:o||!u},{indexOf:function(t){return o?s.apply(this,arguments)||0:n(this,t,arguments.length>1?arguments[1]:void 0)}})},842:function(t,e,r){"use strict";var i=r(714),n=r(843),a=[].reverse,s=[1,2];i({target:"Array",proto:!0,forced:String(s)===String(s.reverse())},{reverse:function(){return n(this)&&(this.length=this.length),a.call(this)}})},843:function(t,e,r){var i=r(723);t.exports=Array.isArray||function(t){return"Array"==i(t)}},844:function(t,e,r){"use strict";r.d(e,"a",(function(){return S}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function n(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function a(t,e){var r=t[0],i=t[1];return[r*Math.cos(e)-i*Math.sin(e),r*Math.sin(e)+i*Math.cos(e)]}function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return!0}var o=Math.PI;function u(t,e,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var i=t.rX,n=t.rY,s=t.x,u=t.y;i=Math.abs(t.rX),n=Math.abs(t.rY);var h=a([(e-s)/2,(r-u)/2],-t.xRot/180*o),c=h[0],l=h[1],f=Math.pow(c,2)/Math.pow(i,2)+Math.pow(l,2)/Math.pow(n,2);1<f&&(i*=Math.sqrt(f),n*=Math.sqrt(f)),t.rX=i,t.rY=n;var g=Math.pow(i,2)*Math.pow(l,2)+Math.pow(n,2)*Math.pow(c,2),p=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(i,2)*Math.pow(n,2)-g)/g)),d=i*l/n*p,v=-n*c/i*p,y=a([d,v],t.xRot/180*o);t.cX=y[0]+(e+s)/2,t.cY=y[1]+(r+u)/2,t.phi1=Math.atan2((l-v)/n,(c-d)/i),t.phi2=Math.atan2((-l-v)/n,(-c-d)/i),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*o),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*o),t.phi1*=180/o,t.phi2*=180/o}function h(t,e,r){s(t,e,r);var i=t*t+e*e-r*r;if(0>i)return[];if(0===i)return[[t*r/(t*t+e*e),e*r/(t*t+e*e)]];var n=Math.sqrt(i);return[[(t*r+e*n)/(t*t+e*e),(e*r-t*n)/(t*t+e*e)],[(t*r-e*n)/(t*t+e*e),(e*r+t*n)/(t*t+e*e)]]}var c,l=Math.PI/180;function f(t,e,r){return(1-r)*t+r*e}function g(t,e,r,i){return t+Math.cos(i/180*o)*e+Math.sin(i/180*o)*r}function p(t,e,r,i){var n=e-t,a=r-e,s=3*n+3*(i-r)-6*a,o=6*(a-n),u=3*n;return Math.abs(s)<1e-6?[-u/o]:function(t,e,r){void 0===r&&(r=1e-6);var i=t*t/4-e;if(i<-r)return[];if(i<=r)return[-t/2];var n=Math.sqrt(i);return[-t/2-n,-t/2+n]}(o/s,u/s,1e-6)}function d(t,e,r,i,n){var a=1-n;return t*(a*a*a)+e*(3*a*a*n)+r*(3*a*n*n)+i*(n*n*n)}!function(t){function e(){return n((function(t,e,r){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=r),t.relative=!1),t}))}function r(){var t=NaN,e=NaN,r=NaN,i=NaN;return n((function(n,a,s){return n.type&S.SMOOTH_CURVE_TO&&(n.type=S.CURVE_TO,t=isNaN(t)?a:t,e=isNaN(e)?s:e,n.x1=n.relative?a-t:2*a-t,n.y1=n.relative?s-e:2*s-e),n.type&S.CURVE_TO?(t=n.relative?a+n.x2:n.x2,e=n.relative?s+n.y2:n.y2):(t=NaN,e=NaN),n.type&S.SMOOTH_QUAD_TO&&(n.type=S.QUAD_TO,r=isNaN(r)?a:r,i=isNaN(i)?s:i,n.x1=n.relative?a-r:2*a-r,n.y1=n.relative?s-i:2*s-i),n.type&S.QUAD_TO?(r=n.relative?a+n.x1:n.x1,i=n.relative?s+n.y1:n.y1):(r=NaN,i=NaN),n}))}function i(){var t=NaN,e=NaN;return n((function(r,i,n){if(r.type&S.SMOOTH_QUAD_TO&&(r.type=S.QUAD_TO,t=isNaN(t)?i:t,e=isNaN(e)?n:e,r.x1=r.relative?i-t:2*i-t,r.y1=r.relative?n-e:2*n-e),r.type&S.QUAD_TO){t=r.relative?i+r.x1:r.x1,e=r.relative?n+r.y1:r.y1;var a=r.x1,s=r.y1;r.type=S.CURVE_TO,r.x1=((r.relative?0:i)+2*a)/3,r.y1=((r.relative?0:n)+2*s)/3,r.x2=(r.x+2*a)/3,r.y2=(r.y+2*s)/3}else t=NaN,e=NaN;return r}))}function n(t){var e=0,r=0,i=NaN,n=NaN;return function(a){if(isNaN(i)&&!(a.type&S.MOVE_TO))throw new Error("path must start with moveto");var s=t(a,e,r,i,n);return a.type&S.CLOSE_PATH&&(e=i,r=n),void 0!==a.x&&(e=a.relative?e+a.x:a.x),void 0!==a.y&&(r=a.relative?r+a.y:a.y),a.type&S.MOVE_TO&&(i=e,n=r),s}}function o(t,e,r,i,a,o){return s(t,e,r,i,a,o),n((function(n,s,u,h){var c=n.x1,l=n.x2,f=n.relative&&!isNaN(h),g=void 0!==n.x?n.x:f?0:s,p=void 0!==n.y?n.y:f?0:u;function d(t){return t*t}n.type&S.HORIZ_LINE_TO&&0!==e&&(n.type=S.LINE_TO,n.y=n.relative?0:u),n.type&S.VERT_LINE_TO&&0!==r&&(n.type=S.LINE_TO,n.x=n.relative?0:s),void 0!==n.x&&(n.x=n.x*t+p*r+(f?0:a)),void 0!==n.y&&(n.y=g*e+n.y*i+(f?0:o)),void 0!==n.x1&&(n.x1=n.x1*t+n.y1*r+(f?0:a)),void 0!==n.y1&&(n.y1=c*e+n.y1*i+(f?0:o)),void 0!==n.x2&&(n.x2=n.x2*t+n.y2*r+(f?0:a)),void 0!==n.y2&&(n.y2=l*e+n.y2*i+(f?0:o));var v=t*i-e*r;if(void 0!==n.xRot&&(1!==t||0!==e||0!==r||1!==i))if(0===v)delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag,n.type=S.LINE_TO;else{var y=n.xRot*Math.PI/180,m=Math.sin(y),x=Math.cos(y),b=1/d(n.rX),w=1/d(n.rY),A=d(x)*b+d(m)*w,T=2*m*x*(b-w),O=d(m)*b+d(x)*w,P=A*i*i-T*e*i+O*e*e,E=T*(t*i+e*r)-2*(A*r*i+O*t*e),C=A*r*r-T*t*r+O*t*t,M=(Math.atan2(E,P-C)+Math.PI)%Math.PI/2,N=Math.sin(M),_=Math.cos(M);n.rX=Math.abs(v)/Math.sqrt(P*d(_)+E*N*_+C*d(N)),n.rY=Math.abs(v)/Math.sqrt(P*d(N)-E*N*_+C*d(_)),n.xRot=180*M/Math.PI}return void 0!==n.sweepFlag&&0>v&&(n.sweepFlag=+!n.sweepFlag),n}))}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),s(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),void 0!==t.rX&&(t.rX=e(t.rX)),void 0!==t.rY&&(t.rY=e(t.rY)),t}},t.TO_ABS=e,t.TO_REL=function(){return n((function(t,e,r){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=r),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),n((function(i,n,a,s,o){if(isNaN(s)&&!(i.type&S.MOVE_TO))throw new Error("path must start with moveto");return e&&i.type&S.HORIZ_LINE_TO&&(i.type=S.LINE_TO,i.y=i.relative?0:a),r&&i.type&S.VERT_LINE_TO&&(i.type=S.LINE_TO,i.x=i.relative?0:n),t&&i.type&S.CLOSE_PATH&&(i.type=S.LINE_TO,i.x=i.relative?s-n:s,i.y=i.relative?o-a:o),i.type&S.ARC&&(0===i.rX||0===i.rY)&&(i.type=S.LINE_TO,delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag),i}))},t.NORMALIZE_ST=r,t.QT_TO_C=i,t.INFO=n,t.SANITIZE=function(t){void 0===t&&(t=0),s(t);var e=NaN,r=NaN,i=NaN,a=NaN;return n((function(n,s,o,u,h){var c=Math.abs,l=!1,f=0,g=0;if(n.type&S.SMOOTH_CURVE_TO&&(f=isNaN(e)?0:s-e,g=isNaN(r)?0:o-r),n.type&(S.CURVE_TO|S.SMOOTH_CURVE_TO)?(e=n.relative?s+n.x2:n.x2,r=n.relative?o+n.y2:n.y2):(e=NaN,r=NaN),n.type&S.SMOOTH_QUAD_TO?(i=isNaN(i)?s:2*s-i,a=isNaN(a)?o:2*o-a):n.type&S.QUAD_TO?(i=n.relative?s+n.x1:n.x1,a=n.relative?o+n.y1:n.y2):(i=NaN,a=NaN),n.type&S.LINE_COMMANDS||n.type&S.ARC&&(0===n.rX||0===n.rY||!n.lArcFlag)||n.type&S.CURVE_TO||n.type&S.SMOOTH_CURVE_TO||n.type&S.QUAD_TO||n.type&S.SMOOTH_QUAD_TO){var p=void 0===n.x?0:n.relative?n.x:n.x-s,d=void 0===n.y?0:n.relative?n.y:n.y-o;f=isNaN(i)?void 0===n.x1?f:n.relative?n.x:n.x1-s:i-s,g=isNaN(a)?void 0===n.y1?g:n.relative?n.y:n.y1-o:a-o;var v=void 0===n.x2?0:n.relative?n.x:n.x2-s,y=void 0===n.y2?0:n.relative?n.y:n.y2-o;c(p)<=t&&c(d)<=t&&c(f)<=t&&c(g)<=t&&c(v)<=t&&c(y)<=t&&(l=!0)}return n.type&S.CLOSE_PATH&&c(s-u)<=t&&c(o-h)<=t&&(l=!0),l?[]:n}))},t.MATRIX=o,t.ROTATE=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0),s(t,e,r);var i=Math.sin(t),n=Math.cos(t);return o(n,i,-i,n,e-e*n+r*i,r-e*i-r*n)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),s(t,e),o(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),s(t,e),o(t,0,0,e,0,0)},t.SKEW_X=function(t){return s(t),o(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return s(t),o(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),s(t),o(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),s(t),o(1,0,0,-1,0,t)},t.A_TO_C=function(){return n((function(t,e,r){return S.ARC===t.type?function(t,e,r){var i,n,s,o;t.cX||u(t,e,r);for(var h=Math.min(t.phi1,t.phi2),c=Math.max(t.phi1,t.phi2)-h,g=Math.ceil(c/90),p=new Array(g),d=e,v=r,y=0;y<g;y++){var m=f(t.phi1,t.phi2,y/g),x=f(t.phi1,t.phi2,(y+1)/g),b=x-m,w=4/3*Math.tan(b*l/4),A=[Math.cos(m*l)-w*Math.sin(m*l),Math.sin(m*l)+w*Math.cos(m*l)],T=A[0],O=A[1],P=[Math.cos(x*l),Math.sin(x*l)],E=P[0],C=P[1],M=[E+w*Math.sin(x*l),C-w*Math.cos(x*l)],N=M[0],_=M[1];p[y]={relative:t.relative,type:S.CURVE_TO};var V=function(e,r){var i=a([e*t.rX,r*t.rY],t.xRot),n=i[0],s=i[1];return[t.cX+n,t.cY+s]};i=V(T,O),p[y].x1=i[0],p[y].y1=i[1],n=V(N,_),p[y].x2=n[0],p[y].y2=n[1],s=V(E,C),p[y].x=s[0],p[y].y=s[1],t.relative&&(p[y].x1-=d,p[y].y1-=v,p[y].x2-=d,p[y].y2-=v,p[y].x-=d,p[y].y-=v),d=(o=[p[y].x,p[y].y])[0],v=o[1]}return p}(t,t.relative?0:e,t.relative?0:r):t}))},t.ANNOTATE_ARCS=function(){return n((function(t,e,r){return t.relative&&(e=0,r=0),S.ARC===t.type&&u(t,e,r),t}))},t.CLONE=function(){return function(t){var e={};for(var r in t)e[r]=t[r];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),a=i(),s=r(),o=n((function(e,r,i){var n=s(a(t(function(t){var e={};for(var r in t)e[r]=t[r];return e}(e))));function c(t){t>o.maxX&&(o.maxX=t),t<o.minX&&(o.minX=t)}function l(t){t>o.maxY&&(o.maxY=t),t<o.minY&&(o.minY=t)}if(n.type&S.DRAWING_COMMANDS&&(c(r),l(i)),n.type&S.HORIZ_LINE_TO&&c(n.x),n.type&S.VERT_LINE_TO&&l(n.y),n.type&S.LINE_TO&&(c(n.x),l(n.y)),n.type&S.CURVE_TO){c(n.x),l(n.y);for(var f=0,v=p(r,n.x1,n.x2,n.x);f<v.length;f++)0<(R=v[f])&&1>R&&c(d(r,n.x1,n.x2,n.x,R));for(var y=0,m=p(i,n.y1,n.y2,n.y);y<m.length;y++)0<(R=m[y])&&1>R&&l(d(i,n.y1,n.y2,n.y,R))}if(n.type&S.ARC){c(n.x),l(n.y),u(n,r,i);for(var x=n.xRot/180*Math.PI,b=Math.cos(x)*n.rX,w=Math.sin(x)*n.rX,A=-Math.sin(x)*n.rY,T=Math.cos(x)*n.rY,O=n.phi1<n.phi2?[n.phi1,n.phi2]:-180>n.phi2?[n.phi2+360,n.phi1+360]:[n.phi2,n.phi1],P=O[0],E=O[1],C=function(t){var e=t[0],r=t[1],i=180*Math.atan2(r,e)/Math.PI;return i<P?i+360:i},M=0,N=h(A,-b,0).map(C);M<N.length;M++)(R=N[M])>P&&R<E&&c(g(n.cX,b,A,R));for(var _=0,V=h(T,-w,0).map(C);_<V.length;_++){var R;(R=V[_])>P&&R<E&&l(g(n.cY,w,T,R))}}return e}));return o.minX=1/0,o.maxX=-1/0,o.minY=1/0,o.maxY=-1/0,o}}(c||(c={}));var v,y=function(){function t(){}return t.prototype.round=function(t){return this.transform(c.ROUND(t))},t.prototype.toAbs=function(){return this.transform(c.TO_ABS())},t.prototype.toRel=function(){return this.transform(c.TO_REL())},t.prototype.normalizeHVZ=function(t,e,r){return this.transform(c.NORMALIZE_HVZ(t,e,r))},t.prototype.normalizeST=function(){return this.transform(c.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(c.QT_TO_C())},t.prototype.aToC=function(){return this.transform(c.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(c.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(c.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(c.SCALE(t,e))},t.prototype.rotate=function(t,e,r){return this.transform(c.ROTATE(t,e,r))},t.prototype.matrix=function(t,e,r,i,n,a){return this.transform(c.MATRIX(t,e,r,i,n,a))},t.prototype.skewX=function(t){return this.transform(c.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(c.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(c.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(c.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(c.ANNOTATE_ARCS())},t}(),m=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},x=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},b=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return n(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var r=this;void 0===e&&(e=[]);for(var i=function(t){e.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0},n=0;n<t.length;n++){var a=t[n],s=!(this.curCommandType!==S.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),o=x(a)&&("0"===this.curNumber&&"0"===a||s);if(!x(a)||o)if("e"!==a&&"E"!==a)if("-"!==a&&"+"!==a||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==a||this.curNumberHasExp||this.curNumberHasDecimal||s){if(this.curNumber&&-1!==this.curCommandType){var u=Number(this.curNumber);if(isNaN(u))throw new SyntaxError("Invalid number ending at "+n);if(this.curCommandType===S.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>u)throw new SyntaxError('Expected positive number, got "'+u+'" at index "'+n+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+n+'"');this.curArgs.push(u),this.curArgs.length===w[this.curCommandType]&&(S.HORIZ_LINE_TO===this.curCommandType?i({type:S.HORIZ_LINE_TO,relative:this.curCommandRelative,x:u}):S.VERT_LINE_TO===this.curCommandType?i({type:S.VERT_LINE_TO,relative:this.curCommandRelative,y:u}):this.curCommandType===S.MOVE_TO||this.curCommandType===S.LINE_TO||this.curCommandType===S.SMOOTH_QUAD_TO?(i({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),S.MOVE_TO===this.curCommandType&&(this.curCommandType=S.LINE_TO)):this.curCommandType===S.CURVE_TO?i({type:S.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===S.SMOOTH_CURVE_TO?i({type:S.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===S.QUAD_TO?i({type:S.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===S.ARC&&i({type:S.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!m(a))if(","===a&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==a&&"-"!==a&&"."!==a)if(o)this.curNumber=a,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+n+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==a&&"Z"!==a)if("h"===a||"H"===a)this.curCommandType=S.HORIZ_LINE_TO,this.curCommandRelative="h"===a;else if("v"===a||"V"===a)this.curCommandType=S.VERT_LINE_TO,this.curCommandRelative="v"===a;else if("m"===a||"M"===a)this.curCommandType=S.MOVE_TO,this.curCommandRelative="m"===a;else if("l"===a||"L"===a)this.curCommandType=S.LINE_TO,this.curCommandRelative="l"===a;else if("c"===a||"C"===a)this.curCommandType=S.CURVE_TO,this.curCommandRelative="c"===a;else if("s"===a||"S"===a)this.curCommandType=S.SMOOTH_CURVE_TO,this.curCommandRelative="s"===a;else if("q"===a||"Q"===a)this.curCommandType=S.QUAD_TO,this.curCommandRelative="q"===a;else if("t"===a||"T"===a)this.curCommandType=S.SMOOTH_QUAD_TO,this.curCommandRelative="t"===a;else{if("a"!==a&&"A"!==a)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+".");this.curCommandType=S.ARC,this.curCommandRelative="a"===a}else e.push({type:S.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=a,this.curNumberHasDecimal="."===a}else this.curNumber+=a,this.curNumberHasDecimal=!0;else this.curNumber+=a;else this.curNumber+=a,this.curNumberHasExp=!0;else this.curNumber+=a,this.curNumberHasExpDigits=this.curNumberHasExp}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var i=0,n=Object.getPrototypeOf(this).parse.call(this,e);i<n.length;i++){var a=n[i],s=t(a);Array.isArray(s)?r.push.apply(r,s):r.push(s)}return r}}})},e}(y),S=function(t){function e(r){var i=t.call(this)||this;return i.commands="string"==typeof r?e.parse(r):r,i}return n(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=c.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],r=0,i=this.commands;r<i.length;r++){var n=t(i[r]);Array.isArray(n)?e.push.apply(e,n):e.push(n)}return this.commands=e,this},e.encode=function(t){return function(t){var e="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var i=t[r];if(i.type===S.CLOSE_PATH)e+="z";else if(i.type===S.HORIZ_LINE_TO)e+=(i.relative?"h":"H")+i.x;else if(i.type===S.VERT_LINE_TO)e+=(i.relative?"v":"V")+i.y;else if(i.type===S.MOVE_TO)e+=(i.relative?"m":"M")+i.x+" "+i.y;else if(i.type===S.LINE_TO)e+=(i.relative?"l":"L")+i.x+" "+i.y;else if(i.type===S.CURVE_TO)e+=(i.relative?"c":"C")+i.x1+" "+i.y1+" "+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===S.SMOOTH_CURVE_TO)e+=(i.relative?"s":"S")+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===S.QUAD_TO)e+=(i.relative?"q":"Q")+i.x1+" "+i.y1+" "+i.x+" "+i.y;else if(i.type===S.SMOOTH_QUAD_TO)e+=(i.relative?"t":"T")+i.x+" "+i.y;else{if(i.type!==S.ARC)throw new Error('Unexpected command type "'+i.type+'" at index '+r+".");e+=(i.relative?"a":"A")+i.rX+" "+i.rY+" "+i.xRot+" "+ +i.lArcFlag+" "+ +i.sweepFlag+" "+i.x+" "+i.y}}return e}(t)},e.parse=function(t){var e=new b,r=[];return e.parse(t,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(y),w=((v={})[S.MOVE_TO]=2,v[S.LINE_TO]=2,v[S.HORIZ_LINE_TO]=1,v[S.VERT_LINE_TO]=1,v[S.CLOSE_PATH]=0,v[S.QUAD_TO]=4,v[S.SMOOTH_QUAD_TO]=2,v[S.CURVE_TO]=6,v[S.SMOOTH_CURVE_TO]=4,v[S.ARC]=7,v)},845:function(t,e,r){"use strict";var i=r(737).PROPER,n=r(722),a=r(713),s=r(716),o=r(711),u=r(776),h=RegExp.prototype,c=h.toString,l=o((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),f=i&&"toString"!=c.name;(l||f)&&n(RegExp.prototype,"toString",(function(){var t=a(this),e=s(t.source),r=t.flags;return"/"+e+"/"+s(void 0===r&&t instanceof RegExp&&!("flags"in h)?u.call(t):r)}),{unsafe:!0})},846:function(t,e,r){"use strict";function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}r.d(e,"a",(function(){return o}));var n=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],a=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function s(t,e,r,n,a){if("string"==typeof t&&(t=document.getElementById(t)),!t||"object"!==i(t)||!("getContext"in t))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var s=t.getContext("2d");try{return s.getImageData(e,r,n,a)}catch(t){throw new Error("unable to access image data: "+t)}}function o(t,e,r,i,o,h){if(!(isNaN(h)||h<1)){h|=0;var c=s(t,e,r,i,o);c=function(t,e,r,i,s,o){for(var h,c=t.data,l=2*o+1,f=i-1,g=s-1,p=o+1,d=p*(p+1)/2,v=new u,y=v,m=1;m<l;m++)y=y.next=new u,m===p&&(h=y);y.next=v;for(var x=null,b=null,S=0,w=0,A=n[o],T=a[o],O=0;O<s;O++){y=v;for(var P=c[w],E=c[w+1],C=c[w+2],M=c[w+3],N=0;N<p;N++)y.r=P,y.g=E,y.b=C,y.a=M,y=y.next;for(var _=0,V=0,R=0,k=0,I=p*P,L=p*E,D=p*C,B=p*M,j=d*P,z=d*E,F=d*C,U=d*M,H=1;H<p;H++){var X=w+((f<H?f:H)<<2),Y=c[X],W=c[X+1],q=c[X+2],G=c[X+3],Q=p-H;j+=(y.r=Y)*Q,z+=(y.g=W)*Q,F+=(y.b=q)*Q,U+=(y.a=G)*Q,_+=Y,V+=W,R+=q,k+=G,y=y.next}x=v,b=h;for(var $=0;$<i;$++){var Z=U*A>>T;if(c[w+3]=Z,0!==Z){var K=255/Z;c[w]=(j*A>>T)*K,c[w+1]=(z*A>>T)*K,c[w+2]=(F*A>>T)*K}else c[w]=c[w+1]=c[w+2]=0;j-=I,z-=L,F-=D,U-=B,I-=x.r,L-=x.g,D-=x.b,B-=x.a;var J=$+o+1;J=S+(J<f?J:f)<<2,_+=x.r=c[J],V+=x.g=c[J+1],R+=x.b=c[J+2],k+=x.a=c[J+3],j+=_,z+=V,F+=R,U+=k,x=x.next;var tt=b,et=tt.r,rt=tt.g,it=tt.b,nt=tt.a;I+=et,L+=rt,D+=it,B+=nt,_-=et,V-=rt,R-=it,k-=nt,b=b.next,w+=4}S+=i}for(var at=0;at<i;at++){var st=c[w=at<<2],ot=c[w+1],ut=c[w+2],ht=c[w+3],ct=p*st,lt=p*ot,ft=p*ut,gt=p*ht,pt=d*st,dt=d*ot,vt=d*ut,yt=d*ht;y=v;for(var mt=0;mt<p;mt++)y.r=st,y.g=ot,y.b=ut,y.a=ht,y=y.next;for(var xt=i,bt=0,St=0,wt=0,At=0,Tt=1;Tt<=o;Tt++){w=xt+at<<2;var Ot=p-Tt;pt+=(y.r=st=c[w])*Ot,dt+=(y.g=ot=c[w+1])*Ot,vt+=(y.b=ut=c[w+2])*Ot,yt+=(y.a=ht=c[w+3])*Ot,At+=st,bt+=ot,St+=ut,wt+=ht,y=y.next,Tt<g&&(xt+=i)}w=at,x=v,b=h;for(var Pt=0;Pt<s;Pt++){var Et=w<<2;c[Et+3]=ht=yt*A>>T,ht>0?(ht=255/ht,c[Et]=(pt*A>>T)*ht,c[Et+1]=(dt*A>>T)*ht,c[Et+2]=(vt*A>>T)*ht):c[Et]=c[Et+1]=c[Et+2]=0,pt-=ct,dt-=lt,vt-=ft,yt-=gt,ct-=x.r,lt-=x.g,ft-=x.b,gt-=x.a,Et=at+((Et=Pt+p)<g?Et:g)*i<<2,pt+=At+=x.r=c[Et],dt+=bt+=x.g=c[Et+1],vt+=St+=x.b=c[Et+2],yt+=wt+=x.a=c[Et+3],x=x.next,ct+=st=b.r,lt+=ot=b.g,ft+=ut=b.b,gt+=ht=b.a,At-=st,bt-=ot,St-=ut,wt-=ht,b=b.next,w+=i}}return t}(c,0,0,i,o,h),t.getContext("2d").putImageData(c,e,r)}}var u=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,